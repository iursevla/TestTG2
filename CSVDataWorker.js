/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./src/Gisplay/GisplayDefaults.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.GisplayDefaults = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _defaults = __webpack_require__(/*! ./defaults.json */ 9);\n\nvar _defaults2 = _interopRequireDefault(_defaults);\n\nvar _GisplayError = __webpack_require__(/*! ./GisplayError */ 2);\n\nvar _CategoricalVariable = __webpack_require__(/*! ./VVs/CategoricalVariable */ 3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Class that exports the Gisplay default values.\r\n * @export\r\n * @class GisplayDefaults\r\n */\nvar GisplayDefaults = exports.GisplayDefaults = function () {\n    function GisplayDefaults() {\n        _classCallCheck(this, GisplayDefaults);\n    }\n\n    _createClass(GisplayDefaults, null, [{\n        key: 'getAvailableClassBreaksMethods',\n\n\n        /**\r\n         * Returns the available class break methods.\r\n         * @returns {string[]} - All available class break methods under Gisplay API.\r\n         * @memberOf GisplayOptions\r\n         */\n        value: function getAvailableClassBreaksMethods() {\n            return _defaults2.default.availableClasssBreakMethods; //[\"quantiles\", \"equalintervals\", \"k-means\"];\n        }\n\n        /**\r\n         * Returns a list of available background map providers.\r\n         * @returns {string[]} - All available background map providers under Gisplay API.\r\n         * @memberof GisplayOptions\r\n         */\n\n    }, {\n        key: 'getAvailableBackgroundProviders',\n        value: function getAvailableBackgroundProviders() {\n            return _defaults2.default.bgmapsProviders; /*['Google Maps', 'GM', //All variants of Google Maps\r\n                                                       'Mapbox', 'MB', //All variants of Mapbox\r\n                                                       'Here Maps', 'HM',\r\n                                                       'Bing Maps', 'BM'];*/\n        }\n\n        /**\r\n         * Returns the default class method to calculate classes for continuous variables.\r\n         * @static\r\n         * @returns {string} - Returns quantiles, the default method for class calculation.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultClassBreakMethod',\n        value: function getDefaultClassBreakMethod() {\n            return _defaults2.default.defaultClassBreakMethod; //'equalintervals';\n        }\n\n        /**\r\n         * Returns the list of available granularities.\r\n         * @static\r\n         * @returns \r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getAvailableGranularities',\n        value: function getAvailableGranularities() {\n            return ['monthOfYear', 'dayOfYear', 'dayOfMonth', 'hourOfDay', 'minuteOfHour', 'year', 'month', 'day', 'value'];\n        }\n\n        /**\r\n         * Returns the available color brewer methods.\r\n         * @returns {Array<string>} - the available color brewer methods.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getAvailableColorBrewerMethods',\n        value: function getAvailableColorBrewerMethods() {\n            return ['colorbrewer-' + GisplayDefaults.SEQUENTIAL().toLocaleLowerCase(), 'colorbrewer-' + GisplayDefaults.DIVERGENT().toLocaleLowerCase(), 'colorbrewer-' + GisplayDefaults.QUALITATIVE().toLocaleLowerCase()];\n        }\n\n        /**\r\n         * Convert the time string to the granularity we want.\r\n         * @param {string} timeString - The time as it was read from the file. \r\n         * @returns {number} - The granul\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'getGranule',\n        value: function getGranule(timeString) {\n            var value = void 0;\n            // console.warn(timeString, this.timeGranularity);\n            /*\r\n                //if cyclic then ...\r\n                day of year -> dayOfYear (n temos )\r\n                month of year -> monthOfYear (temos)\r\n                day of month -> dayOfMonth (temos)\r\n                hour of day -> hourOfDay (temos)\r\n                minute of hour -> minuteOfHour (temos)\r\n                \r\n                //else continuous\r\n                year -> 2015, 2016 ...\r\n                month -> 2015_01, 2015_02 ... 2016_01 etc\r\n                day -> 2015_01_01, 2015_01_02 ...\r\n                hour -> 2015_01_01_01, 2015_01_01_01 ...\r\n                minute\r\n                value\r\n            */\n            switch (this.timeGranularity) {\n                //CYCLIC\n                case 'monthOfYear':\n                    //Mes do ano\n                    value = new Date(timeString).getMonth() + 1; //GOOD\n                    break;\n                case 'dayOfYear':\n                    value = -1; //CHANGE to calculate day of year\n                    break;\n                case 'dayOfMonth':\n                    value = new Date(timeString).getDate(); //GOOD\n                    break;\n                case 'hourOfDay':\n                    value = new Date(timeString).getHours(); //GOOD\n                    break;\n                case 'minuteOfHour':\n                    value = new Date(timeString).getMinutes(); //GOOD\n                    break;\n\n                //CONTINUOUS\n                case 'year':\n                    value = new Date(timeString).getFullYear();\n                    break;\n                case 'month':\n                    //Mes do ano\n                    value = new Date(timeString).getFullYear() + \"_\" + (new Date(timeString).getMonth() + 1);\n                    break;\n                case 'day':\n                    value = new Date(timeString).getFullYear() + \"_\" + (new Date(timeString).getMonth() + 1) + \"_\" + new Date(timeString).getDate();\n                    // value = Number(new Date(timeString).getFullYear() + \"\" + new Date(timeString).getMonth() + \"\" + new Date(timeString).getDay());\n                    break;\n                case 'value':\n                    value = +timeString;\n                    break;\n            }\n            // console.log(value);\n            return value;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     VISUAL VARIABLES   ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * The color visual variable.\r\n         * @static\r\n         * @returns {string} - the string 'color'.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'COLOR',\n        value: function COLOR() {\n            return _defaults2.default.visualVariables.COLOR;\n        }\n\n        /**\r\n         * The saturation visual variable.\r\n         * @static \r\n         * @returns {string} - The saturation visual variable string. \r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'OPACITY',\n        value: function OPACITY() {\n            return _defaults2.default.visualVariables.OPACITY;\n        }\n\n        /**\r\n         * The shape visual variable.\r\n         * @static\r\n         * @returns {string} - The shape visual  variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'SHAPE',\n        value: function SHAPE() {\n            return _defaults2.default.visualVariables.SHAPE;\n        }\n\n        /**\r\n         * The position visual variable.\r\n         * @static\r\n         * @returns {string} - The position visual variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'POSITION',\n        value: function POSITION() {\n            return _defaults2.default.visualVariables.POSITION;\n        }\n\n        /**\r\n         * The variable that is used to hold the matrix projection \r\n         * @static\r\n         * @returns {string} - the projection matrix variable name on all shaders.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'MPROJ',\n        value: function MPROJ() {\n            return _defaults2.default.defaultShadersVariables.projectionMatrix;\n        }\n\n        /**\r\n         * The texture visual variable.\r\n         * @static\r\n         * @returns {string} - The texture visual variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'TEXTURE',\n        value: function TEXTURE() {\n            return _defaults2.default.visualVariables.TEXTURE;\n        }\n\n        /**\r\n         * The size visual variable.\r\n         * @static\r\n         * @returns {string} - The size visual variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'SIZE',\n        value: function SIZE() {\n            return _defaults2.default.visualVariables.SIZE;\n        }\n\n        /**\r\n         * The orientation visual variable.\r\n         * @static\r\n         * @returns {string} - The orientation visual  variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'ORIENTATION',\n        value: function ORIENTATION() {\n            return _defaults2.default.visualVariables.ORIENTATION;\n        }\n\n        /**\r\n         * Returns the index of the given shape.\r\n         * @static\r\n         * @param {string} shapeName - The name of the given shape.\r\n         * @returns {number} - the index of the given shape.\r\n         * @throws {GisplayError} - If the given shape does not exist.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'findShapeIndex',\n        value: function findShapeIndex(shapeName) {\n            // console.warn(shapeTextureName);\n            var shapeIndex = _defaults2.default.shapes[shapeName];\n            if (shapeIndex >= 0) return shapeIndex;\n            throw new _GisplayError.GisplayError('Shape with name: ' + shapeName + ', not found.');\n        }\n\n        /**\r\n         * Returns the index of the given pattern.\r\n         * @static\r\n         * @param {string} patternName - The name of the given pattern.\r\n         * @returns {number} - the index of the given pattern.\r\n         * @throws {GisplayError} - If the given pattern does not exist.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'findPatternIndex',\n        value: function findPatternIndex(patternName) {\n            var patternIndex = _defaults2.default.patterns[patternName];\n            if (patternIndex >= 0) return patternIndex;\n            throw new _GisplayError.GisplayError('Pattern with name: ' + patternName + ', not found.');\n        }\n\n        /**\r\n         * Returns the index of the given figure name.\r\n         * @static\r\n         * @param {string} figureName - The figure name. \r\n         * @returns {number} - the index of the given figure name.\r\n         * @throws {GisplayError} - If the given figure does not exist.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'findFigureIndex',\n        value: function findFigureIndex(figureName) {\n            var figureIndex = _defaults2.default.figures[figureName];\n            if (figureIndex >= 0) return figureIndex;\n            throw new _GisplayError.GisplayError('Figure with name: ' + figureName + ', not found.');\n        }\n\n        /**\r\n         * Returns the default color.\r\n         * @static\r\n         * @returns {Array<number>}  - the default color. \r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultColor',\n        value: function getDefaultColor() {\n            return _defaults2.default.defaultColor;\n        }\n\n        /**\r\n         * Returns the index of the default shape.\r\n         * @static\r\n         * @returns {number} - the index of the default shape .\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultShapeIndex',\n        value: function getDefaultShapeIndex() {\n            return this.findShapeIndex(_defaults2.default.defaultShape); //GisplayDefaults.CIRCLE_FULL.name);\n        }\n\n        /**\r\n         * Returns the index of the default texture.\r\n         * @static\r\n         * @returns {number} - the index of the default texture.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultTextureIndex',\n        value: function getDefaultTextureIndex() {\n            return this.findShapeIndex(_defaults2.default.defaultTexture);\n        }\n\n        /**\r\n         * Returns the index of the default figure.\r\n         * @static\r\n         * @returns {number} - the index of the default figure.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultFigureIndex',\n        value: function getDefaultFigureIndex() {\n            return this.findFigureIndex(_defaults2.default.defaultFigure);\n        }\n\n        /**\r\n         * Returns the default size of a point for the Gisplay API.\r\n         * @static\r\n         * @returns {number=15} - the default size of a point for the Gisplay API.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultSizeValue',\n        value: function getDefaultSizeValue() {\n            return _defaults2.default.defaultSize;\n        }\n\n        /**\r\n         * Returns the minimum size for points.\r\n         * @static\r\n         * @returns {number} -  the minimum size for points.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getMinSizeValue',\n        value: function getMinSizeValue() {\n            return _defaults2.default.minSize;\n        }\n\n        /**\r\n         * Returns the maximum size for points.\r\n         * @static\r\n         * @returns {number} -  the maximum size for points.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getMaxSizeValue',\n        value: function getMaxSizeValue() {\n            return _defaults2.default.maxSize;\n        }\n\n        /**\r\n         * Returns the default orientation of a figure or shape in the Gisplay API.\r\n         * @static\r\n         * @returns {number=0} - the default orientation of a figure or shape in the Gisplay API. \r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultOrientationValue',\n        value: function getDefaultOrientationValue() {\n            return _defaults2.default.defaultOrientation;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     IMAGE DEFAUTLS     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Returns the size of the any shape image.\r\n         * @static\r\n         * @returns {number} - the size of the any shape image.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getShapeImageSize',\n        value: function getShapeImageSize() {\n            return _defaults2.default.shapesImageSize;\n        }\n\n        /**\r\n         * Returns the size of the any pattern image.\r\n         * @static\r\n         * @returns {number} - the size of the any pattern image.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getPatternImageSize',\n        value: function getPatternImageSize() {\n            return _defaults2.default.patternsImageSize;\n        }\n\n        /**\r\n         * Returns the size of the any figure image.\r\n         * @static\r\n         * @returns {number} - the size of the any figure image.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getFigureImageSize',\n        value: function getFigureImageSize() {\n            return _defaults2.default.figuresImageSize;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     WEBGL DEFAUTLS     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * The default alpha value for the \r\n         * @returns \r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultAlphaValue',\n        value: function getDefaultAlphaValue() {\n            return _defaults2.default.defaultAlpha;\n        }\n\n        /**\r\n         * Returns the number of bytes for each element of a Float32Array.\r\n         * @static\r\n         * @returns {number} - the number of bytes for each element of a Float32Array.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getFloat32BytesPerElement',\n        value: function getFloat32BytesPerElement() {\n            return Float32Array.BYTES_PER_ELEMENT;\n        }\n\n        /**\r\n         * The number of bytes for each element of a Uint8Array (Unsigned int).\r\n         * @static\r\n         * @returns {number} - the number of bytes for each element of a Uint8Array (Unsigned int).\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getUint8BytesPerElement',\n        value: function getUint8BytesPerElement() {\n            return Uint8Array.BYTES_PER_ELEMENTM;\n        }\n\n        /**\r\n         * Returns the names of the borders files (vertex and fragment shaders).\r\n         * @static\r\n         * @returns {{borderVertexFileName: string, borderFragmentFileName:string}}\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getBordersShadersFileNames',\n        value: function getBordersShadersFileNames() {\n            return { borderVertexFileName: 'borders.vert', borderFragmentFileName: 'borders.frag' };\n        }\n\n        /**\r\n         * Returns the default color for the borders.\r\n         * @static\r\n         * @returns {Array<number>} - the default color for the borders.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getDefaultBordersColor',\n        value: function getDefaultBordersColor() {\n            return [0, 0, 0];\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     WEBGL SIZE     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * The min data name to be used in all shaders that use size as a visual variable.\r\n         * @static\r\n         * @returns {string} - min data name to be used in all shaders that use size as a visual variable.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getMinSizeDataName',\n        value: function getMinSizeDataName() {\n            return 'minData';\n        }\n\n        /**\r\n         * The max data name to be used in all shaders that use size as a visual variable.\r\n         * @static\r\n         * @returns {string} - max data name to be used in all shaders that use size as a visual variable.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getMaxSizeDataName',\n        value: function getMaxSizeDataName() {\n            return 'maxData';\n        }\n    }, {\n        key: 'getMinSizePixels',\n        value: function getMinSizePixels() {\n            return { name: 'minPixels', value: _defaults2.default.minSize };\n        }\n    }, {\n        key: 'getMaxSizePixels',\n        value: function getMaxSizePixels() {\n            return { name: 'maxPixels', value: _defaults2.default.maxSize };\n        }\n\n        /*\r\n        #####################################################################\r\n        ######################     PARSERS PRIMITIVE     ####################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Returns the type of primitive we want.\r\n         * @static\r\n         * @returns \r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getPrimitive',\n        value: function getPrimitive() {\n            return {\n                POINT: 0,\n                POLYGON: 1,\n                LINE: 2,\n                CSVPOINT: 3,\n                CSVIDS: 4\n            };\n        }\n\n        /**\r\n         * Returns true if the given primitive is polygon.\r\n         * @static\r\n         * @param {number} geoPrimitive - The identifier of the primitive. \r\n         * @returns {boolean} - true if the given primitive is polygon.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'hasPolygons',\n        value: function hasPolygons(geoPrimitive) {\n            return geoPrimitive === this.getPrimitive().POLYGON;\n        }\n\n        /**\r\n         * Returns true if the given primitive is line.\r\n         * @static\r\n         * @param {number} geoPrimitive - The identifier of the primitive. \r\n         * @returns {boolean} - true if the given primitive is line.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'hasLines',\n        value: function hasLines(geoPrimitive) {\n            return geoPrimitive === this.getPrimitive().LINE;\n        }\n\n        /**\r\n         * Returns true if the given primitive is line.\r\n         * @static\r\n         * @param {number} geoPrimitive - The identifier of the primitive. \r\n         * @returns {boolean} - true if the given primitive is line.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'hasPoints',\n        value: function hasPoints(geoPrimitive) {\n            return geoPrimitive === this.getPrimitive().POINT;\n        }\n\n        /**\r\n         * Returns true if the given primitive is points coming from the CSV Parser.\r\n         * @static\r\n         * @param {number} geoPrimitive - The identifier of the primitive. \r\n         * @returns {boolean} - true if the given primitive is points coming from the CSV Parser.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'hasCSVPoints',\n        value: function hasCSVPoints(geoPrimitive) {\n            return geoPrimitive === this.getPrimitive().CSVPOINT;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################      WEBGL PICKING     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Convert the given RGBA color color to it's respective integer value. \r\n         * @param {number} r - The red value.\r\n         * @param {number} g - The green value.\r\n         * @param {number} b - The blue value.\r\n         * @param {number} a - The alpha value.\r\n         * @returns {number} - the integer value converted from the given RGBA value.\r\n         * @see https://github.com/mcwhittemore/rgb-to-int/blob/master/index.js\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'RGBAToNumber',\n        value: function RGBAToNumber(r, g, b, a) {\n            // return r * Math.pow(256, 3) + g * Math.pow(256, 2) + b * Math.pow(256, 1) + a;\n            return r * Math.pow(256, 3) + (g << 16 | b << 8 | a); // g<<16 === g * 2^16\n        }\n\n        /**\r\n         * Convert the given number to it's RGBA representation.\r\n         * @static\r\n         * @param {number} num - The number to be converted. \r\n         * @returns {Array<number>} - the RGBA representation of the given number.\r\n         * @see https://math.stackexchange.com/a/1636055\r\n         * @see https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'numberToRGBA',\n        value: function numberToRGBA(num) {\n            var r = Math.floor(num / Math.pow(256, 3));\n            var g = Math.floor(num / Math.pow(256, 2) % 256);\n            var b = Math.floor(num / 256 % 256);\n            var a = num - (Math.pow(256, 3) * r + Math.pow(256, 2) * g + 256 * b);\n            return [r, g, b, a];\n        }\n\n        /**\r\n         * The name for the boolean variable that is used on the shader to know if we want to draw to picking texture or normal draw.\r\n         * @static\r\n         * @returns {string} - he name for the boolean variable that is used on the shader to know if we want to draw to picking texture or normal draw.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'isPickingName',\n        value: function isPickingName() {\n            return 'isPicking';\n        }\n\n        /**\r\n         * The name of the variable that holds the RGBA colors used for picking.\r\n         * @static\r\n         * @returns {string} - the name of the variable that holds the RGBA colors used for picking.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'pickingColorName',\n        value: function pickingColorName() {\n            return 'pickingColor';\n        }\n\n        /**\r\n         * Returns the name of the picking identifier for the MVC/TG.\r\n         * @static\r\n         * @returns {string} - the name of the picking identifier for the MVC/TG.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'pickingMVCTGIdentifierName',\n        value: function pickingMVCTGIdentifierName() {\n            return \"MVCTGPickingColor\";\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     TIME DEFAUTLS     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Returns the instant time variable.\r\n         * @static\r\n         * @returns {string} - the instant time variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'INSTANT',\n        value: function INSTANT() {\n            return _defaults2.default.timeVariables.INSTANT;\n        }\n\n        /**\r\n         * Returns the interval time variable.\r\n         * @static\r\n         * @returns {string} -  the interval time variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'INTERVAL',\n        value: function INTERVAL() {\n            return _defaults2.default.timeVariables.INTERVAL;\n        }\n\n        /**\r\n         * The animation time variable.\r\n         * @static\r\n         * @returns {string} - the animation time variable.\r\n         * @memberOf GisplayDefaults\r\n         */\n\n    }, {\n        key: 'ANIMATION',\n        value: function ANIMATION() {\n            return _defaults2.default.timeVariables.ANIMATION;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     DATA NATURE     ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Returns the sequential data nature.\r\n         * @static\r\n         * @returns {string} - the sequential data nature.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'SEQUENTIAL',\n        value: function SEQUENTIAL() {\n            return 'sequential';\n        }\n\n        /**\r\n         * Returns the divergent data nature.\r\n         * @static\r\n         * @returns {string} - the divergent data nature.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'DIVERGENT',\n        value: function DIVERGENT() {\n            return 'divergent';\n        }\n\n        /**\r\n         * Returns the qualitative data nature.\r\n         * @static\r\n         * @returns {string} - the qualitative data nature.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'QUALITATIVE',\n        value: function QUALITATIVE() {\n            return 'qualitative';\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################         CSV            ######################\r\n        #####################################################################\r\n        */\n\n    }, {\n        key: 'MESSAGES_CSV',\n        value: function MESSAGES_CSV() {\n            return {\n                TO_START: 'start', //From TP to Ws to start processing their part\n                END_START: 'end_start', //FROM each W to TP flag that the W as terminated its part\n\n                TO_LIMITS_CAT: 'limits_categories', //FROM TP to Ws to get the min and max and categories for each cat and cont vars \n                END_LIMITS_CAT: 'end_limits_categories', //FROM each W to TP with min/max and categories\n\n                TO_LIMITS_CAT_RES: 'limits_categories_res', //FROM TP to Ws with the resulting classes/categories and time granules\n                END_LIMITS_CAT_RES: 'end_limits_categories_res', //FROM each W to TP meaning the W has all the MVCs and TGs in place\n\n                TO_JOIN_DATA: 'join_data', //FROM TP To Ws with information about MVCs and TGs in order to join the final rows\n                END_JOIN_DATA: 'end_join_data', //FROM Ws To TP as a flag to receive data\n\n                TO_GENERATE_RGBA: 'generate_rgba', //FROM TP To Ws to generate RGBA information for each row\n                END_GENERATE_RGBA: 'end_generate_rgba', //FROM each W to TP meaning the W generated all RGBA values\n\n                TO_SEND_DATA: 'send_data', //FROM TP to one W at a time to receive its data\n                END_SEND_DATA: 'end_send_data' //FROM W to TP with the MVCs and TGs created \n            };\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################     ESSENTIALS         ######################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Verifies if the given value is a string.\r\n         * @static\r\n         * @param {any} value - The value to test if it has type string. \r\n         * @returns {boolean} - true, if the given value is a string, false, otherwise.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'isString',\n        value: function isString(value) {\n            return typeof value === 'string';\n        }\n\n        /**\r\n         * Returns true, if the type of value is number.\r\n         * @static\r\n         * @param {any} value \r\n         * @returns {boolean} -  true, if the type of value is number, false, otherwise.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'isNumber',\n        value: function isNumber(value) {\n            return typeof value === 'number';\n        }\n\n        /**\r\n         * Clone a nested array in Javascript.\r\n         * @static\r\n         * @param {Array<any>} arr - The given array. \r\n         * @returns {Array<any>} - the cloned nested array.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'cloneNestedArray',\n        value: function cloneNestedArray(arr) {\n            var i = void 0,\n                copy = void 0;\n            if (Array.isArray(arr)) {\n                copy = arr.slice(0);\n                for (var _i = 0; _i < copy.length; _i++) {\n                    copy[_i] = this.cloneNestedArray(copy[_i]);\n                }return copy;\n            } else if ((typeof arr === 'undefined' ? 'undefined' : _typeof(arr)) === 'object') throw new Error('Cannot clone array containing an object!');else return arr;\n        }\n\n        /*\r\n        #####################################################################\r\n        #######################          EVENTS        ######################\r\n        #####################################################################\r\n        */\n\n    }, {\n        key: 'getEvents',\n        value: function getEvents() {\n            return {\n                /**\r\n                * The name of the library loaded event.\r\n                * @type {string}\r\n                */\n                LIBRARY_LOADED_EVENT: 'libraryLoaded',\n                /**\r\n                 * The name of the parser ended event.\r\n                 * @type {string}\r\n                 */\n                PARSER_ENDED_EVENT: 'parserEnd',\n                /**\r\n                 * The name of the event for geometry ids.\r\n                 * @type {string}\r\n                 */\n                GEOMETRY_IDS_EVENT: 'geometryIdsEnd',\n                /**\r\n                 * The shapes image loaded event.\r\n                 * Needed, otherwise could cause the error: https://github.com/jywarren/webgl-distort/issues/4\r\n                 * @type {string}\r\n                 */\n                SHAPES_IMAGE_LOADED_EVENT: 'shapesImageLoaded',\n                /**\r\n                 * The patterns image loaded event.\r\n                 * @type {string}\r\n                 */\n                PATTERNS_IMAGE_LOADED_EVENT: 'patternsImageLoaded',\n                /**\r\n                 * The figures image loaded event.\r\n                 * @type {string}\r\n                 */\n                FIGURES_IMAGE_LOADED_EVENT: 'figuresImageLoaded',\n                /**\r\n                 * The time range changed event.\r\n                 * @type {string}\r\n                 */\n                TIME_RANGE_CHANGED: 'TimeRangeChanged',\n                /**\r\n                 * The legend changed event.\r\n                 * @type {string}\r\n                 */\n                LEGEND_CHANGED: 'LegendChanged',\n                /**\r\n                 * The extended temporal navigator legend changed event.\r\n                 * @type {string}\r\n                 */\n                EXTENDED_TEMPORAL_NAVIGATOR_LEGEND_CHANGED: 'extended_temporal_navigator_legend',\n                /**\r\n                 * The extended temporal navigator time axis changed event.\r\n                 * @type {string}\r\n                 */\n                EXTENDED_TEMPORAL_NAVIGATOR_TIME_CHANGED: 'extended_temporal_navigator_time',\n                /**\r\n                 * The event for the resize of the window.\r\n                 * @type {string}\r\n                 */\n                RESIZE: 'resize'\n            };\n        }\n\n        /**\r\n         * Returns the list of keys and their key codes to be used by TimeControl and ETN.\r\n         * @static\r\n         * @returns {{LEFT_ARROW: number, A_KEY:number, RIGHT_ARROW: number, D_KEY: number, DOWN_ARROW: number, S_KEY: number, UP_ARROW: number, W_KEY: number}} - the list of keys and their key codes to be used by TimeControl and ETN.\r\n         * @see https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes - Key codes\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'getKeyboardKeyCodes',\n        value: function getKeyboardKeyCodes() {\n            return {\n                LEFT_ARROW: 37,\n                A_KEY: 65,\n                RIGHT_ARROW: 39,\n                D_KEY: 68,\n                DOWN_ARROW: 40,\n                S_KEY: 83,\n                UP_ARROW: 38,\n                W_KEY: 87\n            };\n        }\n\n        /**\r\n         * Returns true if the given Map Variable is an instance of CategoricalVariable.\r\n         * @static\r\n         * @param {any} mapVariable - The value given. \r\n         * @returns {boolean} - true, if the given value is an instance of CategoricalVariable, false, otherwise.\r\n         * @memberof GisplayDefaults\r\n         */\n\n    }, {\n        key: 'isCategoricalMapVariable',\n        value: function isCategoricalMapVariable(mapVariable) {\n            return mapVariable instanceof _CategoricalVariable.CategoricalVariable;\n        }\n    }]);\n\n    return GisplayDefaults;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/Gisplay/VVs/DataVariable.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Represents a variable. This variable has an external and an internal Name.\r\n * External name is the name of the variable on the dataset.\r\n * Internal name is the name the programmer gave to this variable.\r\n * @export\r\n * @class DataVariable\r\n */\nvar DataVariable = exports.DataVariable = function () {\n\n  /**\r\n   * Creates an instance of a Variable.\r\n   * @param {string} externalName - The external name for this variable.\r\n   * @param {string} internalName - The internal name for this variable.\r\n   * @memberof DataVariable\r\n   */\n  function DataVariable(externalName, internalName) {\n    _classCallCheck(this, DataVariable);\n\n    /**\r\n     * It's the external name of this variable\r\n     * @type {string}\r\n     */\n    this.externalName = externalName;\n    /**\r\n     * The internal name for this variable.\r\n     * @type {string}\r\n     */\n    this.internalName = internalName;\n  }\n\n  /**\r\n   * Returns the external name for this visual variable.\r\n   * @returns {string} - the external name of the visual variable.\r\n   * @memberof DataVariable\r\n   */\n\n\n  _createClass(DataVariable, [{\n    key: \"getExternalName\",\n    value: function getExternalName() {\n      return this.externalName;\n    }\n\n    /**\r\n     * Returns the internal name for this visual variable.\r\n     * @returns {string} - the internal name of the visual variable.\r\n     * @memberof DataVariable\r\n     */\n\n  }, {\n    key: \"getInternalName\",\n    value: function getInternalName() {\n      return this.internalName;\n    }\n  }]);\n\n  return DataVariable;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvR2lzcGxheS9WVnMvRGF0YVZhcmlhYmxlLmpzPzgzNDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFJlcHJlc2VudHMgYSB2YXJpYWJsZS4gVGhpcyB2YXJpYWJsZSBoYXMgYW4gZXh0ZXJuYWwgYW5kIGFuIGludGVybmFsIE5hbWUuXHJcbiAqIEV4dGVybmFsIG5hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIG9uIHRoZSBkYXRhc2V0LlxyXG4gKiBJbnRlcm5hbCBuYW1lIGlzIHRoZSBuYW1lIHRoZSBwcm9ncmFtbWVyIGdhdmUgdG8gdGhpcyB2YXJpYWJsZS5cclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgRGF0YVZhcmlhYmxlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGF0YVZhcmlhYmxlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBWYXJpYWJsZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHRlcm5hbE5hbWUgLSBUaGUgZXh0ZXJuYWwgbmFtZSBmb3IgdGhpcyB2YXJpYWJsZS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcm5hbE5hbWUgLSBUaGUgaW50ZXJuYWwgbmFtZSBmb3IgdGhpcyB2YXJpYWJsZS5cclxuICAgICAqIEBtZW1iZXJvZiBEYXRhVmFyaWFibGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZXJuYWxOYW1lLCBpbnRlcm5hbE5hbWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJdCdzIHRoZSBleHRlcm5hbCBuYW1lIG9mIHRoaXMgdmFyaWFibGVcclxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZXh0ZXJuYWxOYW1lID0gZXh0ZXJuYWxOYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBpbnRlcm5hbCBuYW1lIGZvciB0aGlzIHZhcmlhYmxlLlxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbE5hbWUgPSBpbnRlcm5hbE5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBleHRlcm5hbCBuYW1lIGZvciB0aGlzIHZpc3VhbCB2YXJpYWJsZS5cclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gdGhlIGV4dGVybmFsIG5hbWUgb2YgdGhlIHZpc3VhbCB2YXJpYWJsZS5cclxuICAgICAqIEBtZW1iZXJvZiBEYXRhVmFyaWFibGVcclxuICAgICAqL1xyXG4gICAgZ2V0RXh0ZXJuYWxOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVybmFsTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGludGVybmFsIG5hbWUgZm9yIHRoaXMgdmlzdWFsIHZhcmlhYmxlLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSB0aGUgaW50ZXJuYWwgbmFtZSBvZiB0aGUgdmlzdWFsIHZhcmlhYmxlLlxyXG4gICAgICogQG1lbWJlcm9mIERhdGFWYXJpYWJsZVxyXG4gICAgICovXHJcbiAgICBnZXRJbnRlcm5hbE5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxOYW1lO1xyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9HaXNwbGF5L1ZWcy9EYXRhVmFyaWFibGUuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBOzs7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./src/Gisplay/GisplayError.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Custom Error to create a popup message to inform the user about a particular problem.\r\n * @export\r\n * @class GisplayError\r\n * @extends {Error}\r\n * @see https://medium.com/@xjamundx/custom-javascript-errors-in-es6-aa891b173f87\r\n */\nvar GisplayError = exports.GisplayError = function (_Error) {\n        _inherits(GisplayError, _Error);\n\n        /**\r\n         * Creates an instance of GisplayError.\r\n         * @param {string} message - The message to provide to the user.\r\n         * @see https://github.com/codrops/ModalWindowEffects\r\n         * @see https://codepen.io/SMLMRKHLMS/pen/rVYRLQ \r\n         * @memberof GisplayError\r\n         */\n        function GisplayError(message) {\n                _classCallCheck(this, GisplayError);\n\n                // Error.captureStackTrace(this, GisplayError);\n                var _this = _possibleConstructorReturn(this, (GisplayError.__proto__ || Object.getPrototypeOf(GisplayError)).call(this, message));\n\n                console.error(\"GisplayError\");\n                // document.getElementById('head').innerHTML = '';\n\n                // this.createErrorDialog(message);\n                /*  let modal = document.createElement('div');\r\n                 modal.className = 'modal';\r\n                 let content = document.createElement('div');\r\n                 content.className = 'content';\r\n                 content.innerHTML = message;\r\n                    modal.appendChild(content);\r\n                 document.body.appendChild(modal); */\n\n                var modal = document.createElement('div');\n                modal.className = 'gisplayModal';\n\n                var overlay = document.createElement('div');\n                overlay.className = 'gisplayModalOverlay';\n\n                var content = document.createElement('div');\n                content.className = 'gisplayModalContent';\n\n                var contentTitle = document.createElement('div'); //Title\n                var errorFoundParagraph = document.createElement('p'); //Paragraph in title\n                errorFoundParagraph.innerHTML = 'Error found:';\n                contentTitle.appendChild(errorFoundParagraph);\n                var contentMessage = document.createElement('p'); //Content message\n                contentMessage.innerHTML = message;\n                var checkDevTools = document.createElement('button'); //Open devtools button\n                checkDevTools.innerHTML = 'Open Developer tools for more information';\n\n                content.appendChild(contentTitle);\n                content.appendChild(contentMessage);\n                content.appendChild(checkDevTools);\n\n                modal.appendChild(overlay);\n                modal.appendChild(content);\n                document.body.appendChild(modal);\n                return _this;\n        }\n\n        _createClass(GisplayError, [{\n                key: 'createErrorDialog',\n                value: function createErrorDialog(message) {\n                        console.log(\"wut\");\n                        var modal = document.createElement('div');\n                        modal.className = 'modal';\n                        var content = document.createElement('div');\n                        content.className = 'content';\n                        content.innerHTML = message;\n\n                        modal.appendChild(content);\n                        document.body.appendChild(modal);\n                }\n        }]);\n\n        return GisplayError;\n}(Error);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvR2lzcGxheS9HaXNwbGF5RXJyb3IuanM/NzNlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIEN1c3RvbSBFcnJvciB0byBjcmVhdGUgYSBwb3B1cCBtZXNzYWdlIHRvIGluZm9ybSB0aGUgdXNlciBhYm91dCBhIHBhcnRpY3VsYXIgcHJvYmxlbS5cclxuICogQGV4cG9ydFxyXG4gKiBAY2xhc3MgR2lzcGxheUVycm9yXHJcbiAqIEBleHRlbmRzIHtFcnJvcn1cclxuICogQHNlZSBodHRwczovL21lZGl1bS5jb20vQHhqYW11bmR4L2N1c3RvbS1qYXZhc2NyaXB0LWVycm9ycy1pbi1lczYtYWE4OTFiMTczZjg3XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2lzcGxheUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBHaXNwbGF5RXJyb3IuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHByb3ZpZGUgdG8gdGhlIHVzZXIuXHJcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2Ryb3BzL01vZGFsV2luZG93RWZmZWN0c1xyXG4gICAgICogQHNlZSBodHRwczovL2NvZGVwZW4uaW8vU01MTVJLSExNUy9wZW4vclZZUkxRIFxyXG4gICAgICogQG1lbWJlcm9mIEdpc3BsYXlFcnJvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgLy8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgR2lzcGxheUVycm9yKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiR2lzcGxheUVycm9yXCIpO1xyXG4gICAgICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkJykuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuY3JlYXRlRXJyb3JEaWFsb2cobWVzc2FnZSk7XHJcbiAgICAgICAgLyogIGxldCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICBtb2RhbC5jbGFzc05hbWUgPSAnbW9kYWwnO1xyXG4gICAgICAgICBsZXQgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICBjb250ZW50LmNsYXNzTmFtZSA9ICdjb250ZW50JztcclxuICAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSBtZXNzYWdlO1xyXG4gXHJcbiAgICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xyXG4gICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1vZGFsKTsgKi9cclxuXHJcbiAgICAgICAgbGV0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbW9kYWwuY2xhc3NOYW1lID0gJ2dpc3BsYXlNb2RhbCc7XHJcblxyXG4gICAgICAgIGxldCBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgb3ZlcmxheS5jbGFzc05hbWUgPSAnZ2lzcGxheU1vZGFsT3ZlcmxheSc7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29udGVudC5jbGFzc05hbWUgPSAnZ2lzcGxheU1vZGFsQ29udGVudCc7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgLy9UaXRsZVxyXG4gICAgICAgIGxldCBlcnJvckZvdW5kUGFyYWdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvL1BhcmFncmFwaCBpbiB0aXRsZVxyXG4gICAgICAgIGVycm9yRm91bmRQYXJhZ3JhcGguaW5uZXJIVE1MID0gJ0Vycm9yIGZvdW5kOic7XHJcbiAgICAgICAgY29udGVudFRpdGxlLmFwcGVuZENoaWxkKGVycm9yRm91bmRQYXJhZ3JhcGgpO1xyXG4gICAgICAgIGxldCBjb250ZW50TWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsgLy9Db250ZW50IG1lc3NhZ2VcclxuICAgICAgICBjb250ZW50TWVzc2FnZS5pbm5lckhUTUwgPSBtZXNzYWdlO1xyXG4gICAgICAgIGxldCBjaGVja0RldlRvb2xzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7IC8vT3BlbiBkZXZ0b29scyBidXR0b25cclxuICAgICAgICBjaGVja0RldlRvb2xzLmlubmVySFRNTCA9ICdPcGVuIERldmVsb3BlciB0b29scyBmb3IgbW9yZSBpbmZvcm1hdGlvbic7XHJcblxyXG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY29udGVudFRpdGxlKTtcclxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGNvbnRlbnRNZXNzYWdlKTtcclxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGNoZWNrRGV2VG9vbHMpO1xyXG5cclxuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZChvdmVybGF5KTtcclxuICAgICAgICBtb2RhbC5hcHBlbmRDaGlsZChjb250ZW50KTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1vZGFsKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY3JlYXRlRXJyb3JEaWFsb2cobWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwid3V0XCIpO1xyXG4gICAgICAgIGxldCBtb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIG1vZGFsLmNsYXNzTmFtZSA9ICdtb2RhbCc7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb250ZW50LmNsYXNzTmFtZSA9ICdjb250ZW50JztcclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9IG1lc3NhZ2U7XHJcblxyXG4gICAgICAgIG1vZGFsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobW9kYWwpO1xyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9HaXNwbGF5L0dpc3BsYXlFcnJvci5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7Ozs7OztBQU9BOzs7QUFFQTs7Ozs7OztBQU9BO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4Q0E7QUF5Q0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQS9EQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./src/Gisplay/VVs/CategoricalVariable.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CategoricalVariable = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _MapVariable2 = __webpack_require__(/*! ./MapVariable */ 4);\n\nvar _GisplayDefaults = __webpack_require__(/*! ../GisplayDefaults */ 0);\n\nvar _GisplayError = __webpack_require__(/*! ../GisplayError */ 2);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// import { GisplayMap } from '../Maps/GisplayMap';\n\n/**\r\n * Represents a categorical map variable.\r\n * Categorical data, is for those aspects of your data where you make a distinction between different groups, and where you typically can list a small number of categories. This includes product type, gender, age group, etc.\r\n * @see https://eagereyes.org/basics/data-continuous-vs-categorical\r\n * @export\r\n * @class CategoricalVariable\r\n */\nvar CategoricalVariable = exports.CategoricalVariable = function (_MapVariable) {\n    _inherits(CategoricalVariable, _MapVariable);\n\n    /**\r\n     * Creates an instance of CategoricalVariable.\r\n     * @param {string} externalName - The external name for this variable.\r\n     * @param {string} internalName - The internal name for this variable.\r\n     * @param {string} typeOfVisualVariable - The name of visual variable (e.g. color, shape, size, orientation or texture).\r\n     * @param {string} shaderVariableQualifier - The shader variable qualifier. \r\n     * @param {Map<string, string|number>} visualVariableMapping - The mapping for the given visual variable.\r\n     * @param {GisplayMap} gisplayMap - The GisplayMap. It's used when we need to get the colors for the variable.\r\n     * @memberof CategoricalVariable\r\n     */\n    function CategoricalVariable(externalName, internalName, typeOfVisualVariable, shaderVariableQualifier, visualVariableMapping, gisplayMap) {\n        _classCallCheck(this, CategoricalVariable);\n\n        /**\r\n         * The categories for this categorical variable.\r\n         * @type {Set<string>}\r\n         */\n        var _this = _possibleConstructorReturn(this, (CategoricalVariable.__proto__ || Object.getPrototypeOf(CategoricalVariable)).call(this, externalName, internalName, typeOfVisualVariable, shaderVariableQualifier, visualVariableMapping));\n\n        _this.categories = new Set();\n        if (visualVariableMapping && visualVariableMapping.size > 0) {\n            //The mapping was given by the programmer (Map<\"ABC\"->\"red\", \"DEF\"->\"blue\" etc> )\n            /**\r\n             * Map containing the values for this categorical map variable and an integer to represent each of these values.\r\n             * @type {Map<string, number>} \r\n             */\n            _this.valueToIndexMap = _this._createCategoricalVarMap(visualVariableMapping.keys());\n            _this._setIndexToUsableValueMap();\n        }\n\n        /**  \r\n         * Boolean that stores true if class calcutation is required, false, otherwise.\r\n         * @type {boolean}\r\n         */\n        _this.classCalculationRequiredBool = _this.visualVariableMapping.size === 0;\n        /**\r\n         * The GisplayMap object.\r\n         * @type {GisplayMap}\r\n         */\n        _this.gisplayMap = gisplayMap;\n        console.error(_this);\n        return _this;\n    }\n\n    /**\r\n     * For each category in this categorical variable, create one index which will be used as substitute.\r\n     * This replacement will save up a lot of space. \r\n     * @param {Array<string>} values - The categories that this visual variable holds. \r\n     * @returns {Map<string, number>} - the map which contains a sequential integer to represent each category.\r\n     * @memberof CategoricalVariable\r\n     */\n\n\n    _createClass(CategoricalVariable, [{\n        key: '_createCategoricalVarMap',\n        value: function _createCategoricalVarMap(values) {\n            var map = new Map();\n            var index = 0;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var value = _step.value;\n\n                    map.set(value, index++);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            return map;\n        }\n\n        /**\r\n         * Returns the value to index map.\r\n         * @returns {Map<string, number>} - the map containing the values for this categorical visual variable and an integer to represent each of these values.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'getValueIndexMapping',\n        value: function getValueIndexMapping() {\n            return this.valueToIndexMap;\n        }\n\n        /**\r\n         * Returns the index of the given category.\r\n         * @param {string} value - The category to find. \r\n         * @returns {number} - the index of the given category.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'findIndex',\n        value: function findIndex(value) {\n            return this.getValueIndexMapping().get(value);\n        }\n\n        /**\r\n         * Set each index (of each category) to it's respective value (color, or number in the shape/texture image).\r\n         * E.g. 0 -> [255,0,0] etc or 0 -> 14 (index in image).\r\n         * @private\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: '_setIndexToUsableValueMap',\n        value: function _setIndexToUsableValueMap() {\n            var typeOfVisualVariable = this.getTypeOfVisualVariable();\n            var valueToIndexMapKeys = this.valueToIndexMap.keys();\n            console.warn(valueToIndexMapKeys);\n            console.warn(this.getVisualVariableMapping());\n\n            switch (typeOfVisualVariable) {\n                case _GisplayDefaults.GisplayDefaults.COLOR():\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = valueToIndexMapKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var mapkey = _step2.value;\n\n                            var index = this.valueToIndexMap.get(mapkey); // 0, 1..\n                            var color = this.visualVariableMapping.get(mapkey); // [255, 0, 0], [122, 220, 85] ...\n                            this.indexToUsableValueMap.set(index, color);\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n\n                    break;\n                case _GisplayDefaults.GisplayDefaults.SHAPE():\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                        for (var _iterator3 = valueToIndexMapKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                            var _mapkey = _step3.value;\n                            // \"Y\", \"N\"\n                            var _index = this.valueToIndexMap.get(_mapkey); // 0, 1..\n                            var shapeName = this.visualVariableMapping.get(_mapkey); // \"terrain\", \"bricks\", \"triangle\"\n                            var shapeIndex = _GisplayDefaults.GisplayDefaults.findShapeIndex(shapeName); // 6, 7, 12, 13\n                            // console.log(index, shapeName, textureIndex);\n                            this.indexToUsableValueMap.set(_index, shapeIndex);\n                        }\n                    } catch (err) {\n                        _didIteratorError3 = true;\n                        _iteratorError3 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n                        } finally {\n                            if (_didIteratorError3) {\n                                throw _iteratorError3;\n                            }\n                        }\n                    }\n\n                    break;\n                case _GisplayDefaults.GisplayDefaults.TEXTURE():\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                        for (var _iterator4 = valueToIndexMapKeys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            var _mapkey2 = _step4.value;\n                            // \"Y\", \"N\"\n                            var _index2 = this.valueToIndexMap.get(_mapkey2); // 0, 1..\n                            var patternName = this.visualVariableMapping.get(_mapkey2); // \"terrain\", \"bricks\", \"triangle\"\n                            var patternIndex = _GisplayDefaults.GisplayDefaults.findPatternIndex(patternName); // 6, 7, 12, 13\n                            console.log(_index2, patternName, patternIndex);\n                            this.indexToUsableValueMap.set(_index2, patternIndex);\n                        }\n                    } catch (err) {\n                        _didIteratorError4 = true;\n                        _iteratorError4 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n                        } finally {\n                            if (_didIteratorError4) {\n                                throw _iteratorError4;\n                            }\n                        }\n                    }\n\n                    break;\n                case _GisplayDefaults.GisplayDefaults.SIZE():\n                    throw new _GisplayError.GisplayError(\"Visual variable: size, can't be used with a categorical variable.\");\n                case _GisplayDefaults.GisplayDefaults.ORIENTATION():\n                    console.log(valueToIndexMapKeys, this.valueToIndexMap, this.visualVariableMapping);\n                    var _iteratorNormalCompletion5 = true;\n                    var _didIteratorError5 = false;\n                    var _iteratorError5 = undefined;\n\n                    try {\n                        for (var _iterator5 = valueToIndexMapKeys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                            var _mapkey3 = _step5.value;\n                            // \"Y\", \"N\"\n                            var _index3 = this.valueToIndexMap.get(_mapkey3); // 0, 1..\n                            var orientationValue = this.visualVariableMapping.get(_mapkey3); // 0, 28, 90 (degrees)\n                            console.log(_index3, orientationValue);\n                            this.indexToUsableValueMap.set(_index3, orientationValue);\n                        }\n                    } catch (err) {\n                        _didIteratorError5 = true;\n                        _iteratorError5 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                                _iterator5.return();\n                            }\n                        } finally {\n                            if (_didIteratorError5) {\n                                throw _iteratorError5;\n                            }\n                        }\n                    }\n\n                // throw new Error(\"Index to orientation value not yet implemented in Categorical Variable. Should look like COLOR + SHAPE/TEXTURE combined\");\n            }\n            console.log(\"CAT VV_TO_INDEX_MAP =========================\", this.indexToUsableValueMap);\n        }\n\n        /**\r\n         * Add a categorie to the set of categories in this categorical variable.\r\n         * @param {string} category - The category to add to this categorical variable. \r\n         */\n\n    }, {\n        key: 'addCategory',\n        value: function addCategory(category) {\n            this.categories.add(category);\n        }\n\n        /**\r\n         * Add the given categories to the set of categories of this Categorical variable.\r\n         * @param {Set<string>} categories - The categories given. \r\n         */\n\n    }, {\n        key: 'addCategories',\n        value: function addCategories(categories) {\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = categories.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var category = _step6.value;\n\n                    this.addCategory(category);\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n        }\n\n        /**\r\n         * Returns the set of categories for this Categorical variable.\r\n         * @returns {Set<string>} - the set of categories for this Categorical variable.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'getCategories',\n        value: function getCategories() {\n            return this.categories;\n        }\n\n        /**\r\n         * Returns the number of categories for this categorical variable.\r\n         * @returns {number} - the number of categories for this categorical variable.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'getNumCategories',\n        value: function getNumCategories() {\n            return this.categories.size !== 0 ? this.categories.size : this.getVisualVariableMapping().size;\n        }\n\n        /**\r\n         * Update the information when all categories are on the Set. \r\n         * Used when the categories weren't given by the programmer.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'updateCategoricalInformation',\n        value: function updateCategoricalInformation() {\n            this.valueToIndexMap = this._createCategoricalVarMap(this.categories.keys());\n\n            var categories = Array.from(this.categories);\n            console.error(this.valueToIndexMap.size);\n            if (this.valueToIndexMap.size < 2) throw new _GisplayError.GisplayError('Only one category (' + Array.from(this.valueToIndexMap.keys()) + ') in the dataset. ');\n            var colors = this.gisplayMap.getDefaultColors(this.valueToIndexMap.size, _GisplayDefaults.GisplayDefaults.QUALITATIVE());\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = categories.entries()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var _step7$value = _slicedToArray(_step7.value, 2),\n                        i = _step7$value[0],\n                        category = _step7$value[1];\n\n                    this.visualVariableMapping.set(category, colors[i]);\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            this._setIndexToUsableValueMap();\n        }\n\n        /**\r\n         * This map variable requires it's classes to be calculated or not. Categorical variables always return false.\r\n         * @returns {boolean} - true, if we need to calculate the classes, false, otherwise.\r\n         * @memberof CategoricalVariable\r\n         */\n\n    }, {\n        key: 'classCalculationRequired',\n        value: function classCalculationRequired() {\n            return this.classCalculationRequiredBool; // the map has no K->V pairs\n        }\n    }]);\n\n    return CategoricalVariable;\n}(_MapVariable2.MapVariable);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./src/Gisplay/VVs/MapVariable.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MapVariable = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DataVariable2 = __webpack_require__(/*! ./DataVariable */ 1);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Represents a Map Variable.\r\n * @see https://eagereyes.org/basics/data-continuous-vs-categorical\r\n * @see http://leg.ufpr.br/~silvia/CE055/node8.html\r\n * @export\r\n * @class MapVariable\r\n */\nvar MapVariable = exports.MapVariable = function (_DataVariable) {\n    _inherits(MapVariable, _DataVariable);\n\n    /**\r\n     * Creates an instance of MapVariable.\r\n     * @param {string} externalName - The external name for this variable.\r\n     * @param {string} internalName - The internal name for this variable.\r\n     * @param {string} typeOfVisualVariable - The type of visual variable (e.g. color, shape, size, orientation or texture).\r\n     * @param {string} shaderVariableQualifier - The shader variable qualifier. \r\n     * @param {Array<string|number>|Map<string, string|number>} visualVariableMapping - The mapping for the given type of visual variable.\r\n     * @memberof MapVariable\r\n     */\n    function MapVariable(externalName, internalName, typeOfVisualVariable, shaderVariableQualifier, visualVariableMapping) {\n        _classCallCheck(this, MapVariable);\n\n        /**\r\n         * The type of visual variable mapping (e.g. color, shape, size, orientation or texture).\r\n         * @type {string}\r\n         */\n        var _this = _possibleConstructorReturn(this, (MapVariable.__proto__ || Object.getPrototypeOf(MapVariable)).call(this, externalName, internalName));\n\n        _this.typeOfVisualVariable = typeOfVisualVariable;\n        /**\r\n         * The access qualifier for the shader variable.\r\n         * @type {string}\r\n         */\n        _this.shaderQualifier = shaderVariableQualifier;\n        /**\r\n         * The shader qualifier is of type attribute or not.\r\n         * @type {boolean} \r\n         */\n        _this.qualifierIsAttributeBool = shaderVariableQualifier === 'attribute';\n        /**\r\n         * The mapping between the values and the type of visual variable availabe values.\r\n         * E.g. 'THEFT' => 'triangle'\r\n         * @type {Map<string, string>|Array<string|number>}\r\n         */\n        _this.visualVariableMapping = visualVariableMapping;\n        /**\r\n         * The mapping between each class/category index and it's visual variable usable value.\r\n         * Possible keys: 0 .... n-1\r\n         * Possible values: 1) Array of numbers for color\r\n         *                  2) Index number for shapes and textures\r\n         *                  3) Number for size and orientation\r\n         * E.g. 'THEFT' => 'triangle' => 8 (8 is the index of the triangle in the shapes map)\r\n         *      'NO THEFT' => 'square' => 4\r\n         * Then we would have Map( 0 -> 8, 1 -> 4)\r\n         * @type {Map<number,Array<number>|number>}\r\n         */\n        _this.indexToUsableValueMap = new Map();\n        return _this;\n    }\n\n    /**\r\n     * Returns the type of visual variable (e.g. color, shape, size, orientation or texture) that this map variable will be mapped to.\r\n     * @returns {string} - the type of visual variable mapping (e.g. color, shape, size, orientation or texture).\r\n     * @memberof MapVariable\r\n     */\n\n\n    _createClass(MapVariable, [{\n        key: 'getTypeOfVisualVariable',\n        value: function getTypeOfVisualVariable() {\n            return this.typeOfVisualVariable;\n        }\n\n        /**\r\n         * Returns the mapping for the type of visual variable. \r\n         * It can be a Object<Key, Value> if it's categorical, an array of strings or array of numbers. \r\n         * @returns {Map<string, string>|Array<string|number>} - the mappings for this visual variable.\r\n         * @memberof MapVariable\r\n         */\n\n    }, {\n        key: 'getVisualVariableMapping',\n        value: function getVisualVariableMapping() {\n            return this.visualVariableMapping;\n            //Array number (Cont no size e orientation)\n            //Array string (Cont para color, size e orientation + Cat para color)\n            //Object K->V (Cat para shape, texture e orientation)\n        }\n\n        /**\r\n         * This map variable requires it's classes to be calculated or not. Categorical variables always return false.\r\n         * @returns {boolean} - true, if we need to calculate the classes, false, otherwise.\r\n         * @memberof MapVariable\r\n         */\n\n    }, {\n        key: 'classCalculationRequired',\n        value: function classCalculationRequired() {\n            return false;\n        }\n\n        /**\r\n         * Returns the mapping between each class/category and it's visual variable usable value.\r\n         * @returns {Map<number,Array<number>|number>} - the mapping between each class/category and it's visual variable usable value.\r\n         * @memberof MapVariable\r\n         */\n\n    }, {\n        key: 'getIndexToUSableValueMap',\n        value: function getIndexToUSableValueMap() {\n            return this.indexToUsableValueMap;\n        }\n\n        /**\r\n         * The value associated with the given index.\r\n         * E.g. [255,0,0] for color or 57 for size/orientation or 3 for shape/texture.\r\n         * @param {number} index - The index of the visual variable.\r\n         * @returns {Array<number>|number>}\r\n         * @memberof MapVariable\r\n         */\n\n    }, {\n        key: 'findUsableValue',\n        value: function findUsableValue(index) {\n            return this.indexToUsableValueMap.get(index);\n        }\n\n        /**\r\n         * The access qualifier for the shader variable \r\n         * @returns {string} - the access qualifier for the shader variable \r\n         * @memberOf MapVariable\r\n         */\n\n    }, {\n        key: 'getShaderVariableQualifier',\n        value: function getShaderVariableQualifier() {\n            return this.shaderQualifier;\n        }\n\n        /**\r\n         * Returns true if the shader qualifier is equal to attribute, false, otherwise.\r\n         * @returns {boolean} - true if the shader qualifier is equal to attribute, false, otherwise.\r\n         * @memberOf MapVariable\r\n         */\n\n    }, {\n        key: 'qualifierIsAttribute',\n        value: function qualifierIsAttribute() {\n            return this.qualifierIsAttributeBool;\n        }\n    }]);\n\n    return MapVariable;\n}(_DataVariable2.DataVariable);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/Gisplay/VVs/ContinuousVariable.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ContinuousVariable = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _MapVariable2 = __webpack_require__(/*! ./MapVariable */ 4);\n\nvar _GisplayDefaults = __webpack_require__(/*! ../GisplayDefaults */ 0);\n\nvar _GisplayError = __webpack_require__(/*! ../GisplayError */ 2);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Represents a continuous variable.\r\n * Continous data, is data where the values can change continuously, and you cannot count the number of different values (e.g. weight, price, profits, counts, etc). \r\n * @see https://eagereyes.org/basics/data-continuous-vs-categorical\r\n * @export\r\n * @class ContinuousVariable\r\n */\nvar ContinuousVariable = exports.ContinuousVariable = function (_MapVariable) {\n    _inherits(ContinuousVariable, _MapVariable);\n\n    /**\r\n     * Creates an instance of ContinuousVariable.\r\n     * @param {string} externalName - The external name for this variable.\r\n     * @param {string} internalName - The internal name for this variable.\r\n     * @param {string} typeOfVisualVariable - The type of visual variable (e.g. color, shape, size, orientation or texture).\r\n     * @param {string} shaderVariableQualifier - The shader variable qualifier. \r\n     * @param {Array<string|number>} visualVariableMapping - The mapping for the given type of visual variable.\r\n     * @param {Array<number>} classBreaks - The classes for this map variable.\r\n     * @param {string} numberOfClasses - The number of classes for this continuous variable.\r\n     * @param {string} classBreakMethod - The class breaks method to be used.\r\n     * @param {Array<number|string>} classBreakMethodParams - The parameters for the class break method.\r\n     * @memberof ContinuousVariable\r\n     */\n    function ContinuousVariable(externalName, internalName, typeOfVisualVariable, shaderVariableQualifier, visualVariableMapping, classBreaks, numberOfClasses, classBreakMethod, classBreakMethodParams) {\n        _classCallCheck(this, ContinuousVariable);\n\n        /**\r\n         * The class intervals for the map variable.\r\n         * @type {Array<number>}\r\n         */\n        var _this = _possibleConstructorReturn(this, (ContinuousVariable.__proto__ || Object.getPrototypeOf(ContinuousVariable)).call(this, externalName, internalName, typeOfVisualVariable, shaderVariableQualifier, visualVariableMapping));\n\n        _this.classBreaks = classBreaks;\n        /**\r\n         * The number of classes for the map variable.\r\n         * @type {number}\r\n         */\n        _this.numberOfClasses = visualVariableMapping ? visualVariableMapping.length : numberOfClasses;\n        /**\r\n         * The method to use to calculate classes for the map variable.\r\n         * @type {string}\r\n         */\n        _this.classBreakMethod = classBreakMethod;\n        /**\r\n         * Returns the array of params for the class break method.\r\n         *  @type{Array<number|string>} \r\n         */\n        _this.classBreakMethodParams = classBreakMethodParams;\n\n        /**\r\n         * Number of bins. This value is hardcoded to 100. But it should work even if changed to another integer value.\r\n         * @type {number}\r\n         */\n        _this.numBins = 100;\n        /**\r\n         * The minimum value.\r\n         * @type {number}\r\n         */\n        _this.min = Number.MAX_SAFE_INTEGER - 1;\n        /**\r\n         * The maximum value.\r\n         * @type {number}\r\n         */\n        _this.max = Number.MIN_SAFE_INTEGER + 1;\n\n        _this.newMin = Number.MAX_SAFE_INTEGER;\n        _this.newMax = Number.MIN_SAFE_INTEGER;\n\n        /**\r\n         * Amount between any two bins.\r\n         * @type {number}\r\n         */\n        _this.step = -1;\n        /**\r\n         * The bin limits.\r\n         * @type {Array<number>}\r\n         */\n        _this.bins = new Array(100).fill(-1);\n        /**\r\n         * Histogram with number of values by bin interval. \r\n         * @type {Array<number>}\r\n         */\n        _this.histogram = new Array(100).fill(0); //Array with 100 elements each filled with the value 0\n        /**\r\n         * The class intervals for the map variable.\r\n         * @type {Array<Array<number>>}\r\n         */\n        _this.classIntervals;\n\n        if (_this.classBreaks) {\n            _this.min = _this.classBreaks[0];\n            _this.max = _this.classBreaks[_this.classBreaks.length - 1];\n            _this.step = (_this.getMax() - _this.getMin()) / _this.numBins;\n\n            _this.bins = _this.buildBinIntervals();\n            _this.classIntervals = _this.calculateClassIntervals(_this.classBreaks);\n        }\n        if (_this.getVisualVariableMapping()) _this._setIndexToUsableValueMap();\n\n        /**  \r\n         * Boolean that stores true if class calcutation is required, false, otherwise.\r\n         * @type {boolean}\r\n         */\n        _this.classCalculationRequiredBool = _this.classBreaks === undefined;\n        console.log(_this);\n        return _this;\n    }\n\n    /**\r\n     * Returns the method to be used to calculate the classes for this map variable.\r\n     * @returns {string} - the method to be used to calculate the classes for this variable.\r\n     * @memberof ContinuousVariable\r\n     */\n\n\n    _createClass(ContinuousVariable, [{\n        key: 'getClassBreakMethod',\n        value: function getClassBreakMethod() {\n            return this.classBreakMethod;\n        }\n\n        /**\r\n         * Returns the class intervals for this map variable.\r\n         * @returns {Array<number>} - the class intervals for the visual variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getClassBreaks',\n        value: function getClassBreaks() {\n            return this.classBreaks;\n        }\n\n        /**\r\n         * Sets the class breaks to the calculated class breaks.\r\n         * @param {Array<number>} calculatedClassBreaks - The array of class intervals for the visual variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'setClassBreaks',\n        value: function setClassBreaks(calculatedClassBreaks) {\n            this.classBreaks = calculatedClassBreaks;\n        }\n\n        /**\r\n         * Returns true, if the class breaks weren't given by the programmer for the map variable, false, otherwise. \r\n         * @returns {boolean} - true, if the class breaks weren't given by the programmer for the visual variable, false, otherwise.  \r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'classCalculationRequired',\n        value: function classCalculationRequired() {\n            return this.classCalculationRequiredBool;\n        }\n\n        /**\r\n         * Calculates class intervals for this variable.\r\n         * @param {Array<number>} classBreaks - The class breaks given by the programmer. \r\n         * @returns {Array<Array<number>>} - the start and end for each class of this variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'calculateClassIntervals',\n        value: function calculateClassIntervals(classBreaks) {\n            console.error(\"classBreaks = \", classBreaks, this);\n            var res = [];\n\n            /*     \r\n                [min, a[, [a, b[, [b,c[, [c,max] -> caso em que o min dos dados é !== do a\r\n                min - todos os valore menores que a\r\n                [a,b,c] ->  [min, a[, [a, b[, [b,c[, [c,max] \r\n                Se min for == a então n cabe \r\n                >= a && < a \r\n                  1º intervalos todos os inferiores a \"a\"\r\n                o ultimo intervalo é todos os >= a c \r\n            */\n            for (var i = 0; i < classBreaks.length - 1; i++) {\n                res.push([classBreaks[i], classBreaks[i + 1]]);\n            } /*   if (this.classBreaks !== undefined) {\r\n                    res.push([this.min, classBreaks[0]]);\r\n                    for (let i = 0; i < classBreaks.length - 1; i++)\r\n                        res.push([classBreaks[i], classBreaks[i + 1]]);\r\n                    res.push([classBreaks[classBreaks.length - 1], this.max]);\r\n                } else {\r\n                    // res.push([this.min, classBreaks[0]]);\r\n                    for (let i = 0; i < classBreaks.length - 1; i++)\r\n                        res.push([classBreaks[i], classBreaks[i + 1]]);\r\n                    // res.push([classBreaks[classBreaks.length - 1], this.max]);\r\n                } */\n            return res;\n            // return null;\n        }\n\n        /**\r\n         * Returns the class intervals for this class.\r\n         * @returns {Array<Array<number>>} - the class intervals for this class. \r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getClassIntervals',\n        value: function getClassIntervals() {\n            return this.classIntervals;\n        }\n\n        /**\r\n         * Find the class index of the given value.\r\n         * It's inside a class if it's value is equal or higher than the starting point and less than the end point.\r\n         * @param {number} value - The value of the element.\r\n         * @returns {number} - The  index of the class.\r\n         * @memberof Parser\r\n         */\n\n    }, {\n        key: 'findClassIntervalIndex',\n        value: function findClassIntervalIndex(value) {\n            var classIntervals = this.getClassIntervals();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = classIntervals.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _step$value = _slicedToArray(_step.value, 2),\n                        index = _step$value[0],\n                        classInterval = _step$value[1];\n\n                    if (value >= classInterval[0] && value < classInterval[1]) return index;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (value < classIntervals[0][0]) return 0;\n            return classIntervals.length - 1;\n        }\n\n        /**\r\n         * Set the min and max values if the given value changes them.\r\n         * @param {number} value - The given vaue. \r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'setMinMax',\n        value: function setMinMax(value) {\n            if (value < this.min) this.min = value;\n            if (value > this.max) this.max = value;\n            /* if (value < this.newMin)\r\n                this.newMin = value;\r\n            if (value > this.newMax)\r\n                this.newMax = value; */\n        }\n\n        /*\r\n        #####################################################################\r\n        ######################     CLASS CALCULATION      ###################\r\n        #####################################################################\r\n        */\n        /**\r\n         * Returns the minimum value for the visual variable.\r\n         * @returns {number} - the minimum value for the visual variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getMin',\n        value: function getMin() {\n            return this.min;\n        }\n\n        /**\r\n         * Returns the maximum value for the visual variable.\r\n         * @returns {number} -  the maximum value for the visual variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getMax',\n        value: function getMax() {\n            return this.max;\n        }\n\n        /**\r\n         * Update the step vaue.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'setStep',\n        value: function setStep() {\n            this.step = (this.getMax() - this.getMin()) / this.numBins;\n        }\n\n        /**\r\n         * Returns the step between each bin value.\r\n         * @returns {number} - the step between each bin value.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getStep',\n        value: function getStep() {\n            return this.step;\n        }\n\n        /**\r\n         * Returns the histogram for this continuous variable.\r\n         * @returns {Array<number>} - the histogram for this continuous variable.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getHistogram',\n        value: function getHistogram() {\n            return this.histogram;\n        }\n\n        /**\r\n         * Updates the histogram of this continuous variable with the histogram values\r\n         * @param {Array<number>} histogram - The given histogram\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'updateHistogram',\n        value: function updateHistogram(histogram) {\n            for (var i = 0; i < histogram.length; i++) {\n                this.histogram[i] += histogram[i];\n            }\n        }\n\n        /**\r\n         * Return the number of classes.\r\n         * @returns {numer} - the number of classes.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'getNumberOfClasses',\n        value: function getNumberOfClasses() {\n            return this.numberOfClasses;\n        }\n\n        /**\r\n         * Create 100 bins with equal intervals between the minimum and maximum value.\r\n         * @param {number} min - The minimum for this continuous variable. \r\n         * @param {number} max - The maximum for this continuous variable.\r\n         * @returns {Array<number>} - The bins that will be used to calculate the classes.\r\n         * @memberof LegendClasses\r\n         */\n\n    }, {\n        key: 'buildBinIntervals',\n        value: function buildBinIntervals() {\n            // let step = (max - min) / this.numBins;\n            if (this.step === -1) this.setStep();\n            var resBins = [];\n            var min = this.min;\n            var max = this.max;\n            // resBins.push(min);\n            for (var i = min; i < max; i += this.step) {\n                resBins.push(i);\n            }if (Math.round(resBins[resBins.length - 1]) === max || max - resBins[resBins.length - 1] < 0.0001) //min = 0, max = 199.2 Math.round(199.19999999999976) = 199 <-- ERROR\n                resBins[resBins.length - 1] = max;else resBins.push(max);\n            return resBins;\n        }\n\n        /**\r\n         * Create the bins array with 101? values that represent the intervals.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'createBins',\n        value: function createBins() {\n            this.bins = this.buildBinIntervals();\n        }\n\n        /**\r\n         * Add the value to the respective bin index.\r\n         * This method works at O(1) instead of O(n), since it only needs to calculate the index and add one to it's bin.\r\n         * The alternative was to loop through all the bins and find where this value would fit.\r\n         * @param {number} value - The value to insert into one of the bins. \r\n         * @see http://prntscr.com/gdn1wu - Reason for if statement\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'addValueToBins',\n        value: function addValueToBins(value) {\n            var binIndex = Math.floor((value - this.min) / this.step);\n            if (value >= this.max) //The case it is equal to the max value then change index to the previous.\n                binIndex = this.numBins - 1;else if (value <= this.min) binIndex = 0;\n            this.histogram[binIndex]++;\n            // console.log(\"value\", value, \"binIndex\", binIndex);\n        }\n\n        /**\r\n         * Calculates the classes for the visual variable using the method specified by the programmer.\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'calculateClasses',\n        value: function calculateClasses() {\n            //Usando os bins faz calculo de classes e alterar guardar nos classIntervals\n            switch (this.getClassBreakMethod()) {\n                case 'quantiles':\n                    this.classIntervals = this.calculateClassIntervals(this.quantiles());\n                    break;\n                case 'equalintervals':\n                    // console.log('equalintervals');\n                    this.classIntervals = this.calculateClassIntervals(this.equalIntervals());\n                    break;\n                default:\n                    throw new _GisplayError.GisplayError('Continuous Variable: ' + this.getInternalName() + '. Given method for class calculation does not exist. ');\n            }\n\n            if (this.classIntervals.length !== this.numberOfClasses) throw new _GisplayError.GisplayError(\"The number of calculated class intervals is different from the number of classes\");\n        }\n\n        /**\r\n         * Calculate the intervals for each class using the quantiles method.\r\n         * @param {Array<number>} histogram - Histogram with quantity of values by bin interval. \r\n         * @param {number} binValues - The bin values between the minimum and the maximum.\r\n         * @param {number} numRows - Number of rows read from the file.\r\n         * @param {number} numClasses - Number of classes to calculate.\r\n         * @returns {Array<number>} -  The resulting classes using the quantiles method.\r\n         * @see https://en.wikipedia.org/wiki/Quantile\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'quantiles',\n        value: function quantiles() {\n            var numberOfClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getNumberOfClasses();\n\n            var numRows = 0;\n            for (var i = 0, length = this.histogram.length; i < length; i++) {\n                numRows += this.histogram[i];\n            }var numValsPerClass = numRows / numberOfClasses;\n            // console.log(numRows, this.getNumberOfClasses(), numValsPerClass);\n            var classes = [];\n            classes.push(this.bins[0]);\n            var sum = 0;\n            for (var _i = 0; _i < this.histogram.length - 1; _i++) {\n                sum += this.histogram[_i];\n                if (sum >= numValsPerClass) {\n                    classes.push(this.bins[_i + 1]);\n                    sum = 0;\n                }\n            }\n            classes.push(this.bins[this.bins.length - 1]);\n            // console.log(classes);\n            // console.log(this);\n            if (classes.length < numberOfClasses) console.warn('Quantiles method couldn\\'t create ' + numberOfClasses + ' classes, instead it created ' + (classes.length - 1) + ' classes. [' + classes + ']');else if (classes.length - 1 > numberOfClasses) throw new _GisplayError.GisplayError('Something went wrong with quantiles method. Number of classes calculated is: ' + (classes.length - 1) + ', the intended values was ' + this.getNumberOfClasses());\n            return classes;\n        }\n\n        /**\r\n         * Taking the calculated bins, this method will calculate the intervals for each class using the equal intervals method.\r\n         * @param {number} binValues - The bin values between the minimum and the maximum.\r\n         * @param {number} numClasses - Number of classes to calculate.\r\n         * @returns {Array<number>} - The resulting classes using the equal intervals method.\r\n         * @see http://wiki.gis.com/wiki/index.php/Equal_Interval_classification\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: 'equalIntervals',\n        value: function equalIntervals() {\n            var numberOfClasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getNumberOfClasses();\n\n            var interval = Math.round((this.getMax() - this.getMin()) / numberOfClasses); //To give a integer (this.bins.length - 1) / this.numClasses;\n            // console.log(\"EquInt interval=\", interval);\n            // console.log(this.getMin(), this.getMax(), numberOfClasses);\n            var classes = [];\n            classes.push(this.bins[0]);\n            var currentValue = this.getMin(); // Current value\n            for (var i = 0; i < numberOfClasses - 1; i++) {\n                currentValue += interval;\n                classes.push(this._findBin(currentValue));\n            }\n            classes.push(this.bins[this.bins.length - 1]);\n\n            // console.log(\"equalIntervals = \", classes);\n            return classes;\n        }\n\n        /**\r\n         * Find the bin that is higher or equal than the value and the distance to next bin value is smaller than to the first.\r\n         * @param {number} value - The value used to find the correct bin. \r\n         * @returns {number} - the bin that is higher or equal than the value and the distance to next bin value is smaller than to the first. \r\n         * @private \r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: '_findBin',\n        value: function _findBin(value) {\n            for (var i = 0; i < this.bins.length - 1; i++) {\n                var val1 = this.bins[i];\n                var val2 = this.bins[i + 1];\n                if (value >= val1 && value < val2) {\n                    var distToVal1 = value - val1;\n                    var distToVal2 = val2 - value;\n                    if (distToVal1 <= distToVal2) return val1;\n                    return val2;\n                }\n            }\n        }\n\n        /**\r\n         * Set each index (of each class) to it's respective value (color array, size or orientation value).\r\n         * E.g. 0 -> [255, 0, 0], 1 -> [0, 128, 0] etc\r\n         * @private\r\n         * @memberof ContinuousVariable\r\n         */\n\n    }, {\n        key: '_setIndexToUsableValueMap',\n        value: function _setIndexToUsableValueMap() {\n            var typeOfVisualVariable = this.getTypeOfVisualVariable();\n            switch (typeOfVisualVariable) {\n                case _GisplayDefaults.GisplayDefaults.COLOR():\n                case _GisplayDefaults.GisplayDefaults.SIZE():\n                case _GisplayDefaults.GisplayDefaults.ORIENTATION():\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                        for (var _iterator2 = this.getVisualVariableMapping().entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                            var _step2$value = _slicedToArray(_step2.value, 2),\n                                index = _step2$value[0],\n                                vvMapping = _step2$value[1];\n\n                            this.indexToUsableValueMap.set(index, vvMapping);\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                _iterator2.return();\n                            }\n                        } finally {\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n\n                    break;\n                case _GisplayDefaults.GisplayDefaults.SHAPE():\n                case _GisplayDefaults.GisplayDefaults.TEXTURE():\n                    throw new _GisplayError.GisplayError(typeOfVisualVariable + ' shouldn\\'t be used with a continuous variable.');\n            }\n            // console.log(\"CONT VV_TO_INDEX_MAP =========================\", this.indexToUsableValueMap);\n        }\n    }]);\n\n    return ContinuousVariable;\n}(_MapVariable2.MapVariable);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/* no static exports found */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/Gisplay/VVs/TimeVariable.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TimeVariable = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DataVariable2 = __webpack_require__(/*! ./DataVariable */ 1);\n\nvar _GisplayDefaults = __webpack_require__(/*! ../GisplayDefaults */ 0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Represents the time information.\r\n * @export\r\n * @class TimeVariable\r\n */\nvar TimeVariable = exports.TimeVariable = function (_DataVariable) {\n    _inherits(TimeVariable, _DataVariable);\n\n    /**\r\n     * Creates an instance of TimeVariable.\r\n     * @param {string} externalName - The external name of the time variable.\r\n     * @param {string} internalName - The internal name of the time variable.\r\n     * @param {string} granularity - The granularity of the time variable.\r\n     * @param {string} timeControl - The time control for the time variable.\r\n     * @memberof TimeVariable\r\n     */\n    function TimeVariable(externalName, internalName, granularity, timeControl) {\n        _classCallCheck(this, TimeVariable);\n\n        /**\r\n         * The time granularity.\r\n         * @type {string}\r\n         */\n        var _this = _possibleConstructorReturn(this, (TimeVariable.__proto__ || Object.getPrototypeOf(TimeVariable)).call(this, externalName, internalName));\n\n        _this.granularity = granularity;\n        /**\r\n         * The granules for this time variable that were processed from the file.\r\n         * @type {Set<string|number>}\r\n         */\n        _this.granules = new Set();\n        /**\r\n         * A map with each temporal granule and it's index.\r\n         * @type {Map<number|string, number>}\r\n         */\n        _this.temporalGranulesMap = new Map();\n        /**\r\n         * The current granule index. This is used to give each granule it's specific index.\r\n         * @type {number}\r\n         */\n        _this.granuleIndex = 0;\n        /**\r\n         * The temporal granules sorted by Date. If its a number (year or day or value etc) then sorted by number.\r\n         * @type {Array<number|string>}\r\n         */\n        _this.sortedTemporalGranulesArr = [];\n        /** \r\n         * The map that contains the string that represents the date and the respective date (e.g. 2016_1_1 => 1 January 2016 OR 2016 => 2016)\r\n         * If the date is a number (e.g. year, monthOfYear, value etc) then the key and the value are equal (2016 => 2016).\r\n         * A value here will be a key in the temporalGranulesMap.\r\n         * @type {Map<string|number, string|number>}\r\n         */\n        _this.strToTemporalGranuleMap = new Map();\n        /** \r\n         * The map with the string temporal granules and their respective index inm the sorted temporal granules array.\r\n         * E.g. Map (3)  {\"1 January 2016\" => 0, \"2 January 2016\" => 1, \"3 January 2016\" => 2, \"4 January 2016\" => 3 }.\r\n         * Used to quickly search for the index of the start and end point of the time control.\r\n         * A value here is an index in the sortedTemporalGranulesArr.\r\n         * @type {Map<string|number, number>}\r\n         */\n        _this.sortedTGsToIndexMap = new Map();\n        /**\r\n         * The time control to use.\r\n         * @type {string}\r\n         */\n        _this.timeControl = timeControl;\n        return _this;\n    }\n\n    /**\r\n     * The granularity\r\n     * @returns {string} - The granularity. \r\n     * @memberof TimeVariable\r\n     */\n\n\n    _createClass(TimeVariable, [{\n        key: 'getGranularity',\n        value: function getGranularity() {\n            return this.granularity;\n        }\n\n        /**\r\n         * Returns the type of time control that should be used.\r\n         * @returns \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getTypeOfTimeControl',\n        value: function getTypeOfTimeControl() {\n            return this.timeControl ? this.timeControl : _GisplayDefaults.GisplayDefaults.INSTANT();\n        }\n\n        /**\r\n         * Available granularities for the time value.\r\n         * @returns {Array<string>} - the set of available granularities.  \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: '_getAvailableGranularities',\n        value: function _getAvailableGranularities() {\n            return ['year', 'month', 'day', 'value', //Continuous\n            'monthOfYear', 'dayOfYear', 'dayOfMonth', 'hourOfDay', 'minuteOfHour' // Cyclic\n            ];\n        }\n\n        //GRANULES ETC\n        /**\r\n         * Add all values to the temporal granules map.\r\n         * @param {Array<number>} values - The array of values to add to the granules map.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'createTemporalGranulesMap',\n        value: function createTemporalGranulesMap(values) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var val = _step.value;\n\n                    this.temporalGranulesMap.set(val, this.granuleIndex++);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        /**\r\n         * Add temporal granule to the temporal granules set and return it's index if it does not exist.\r\n         * @param {number} temporalGranule - The temporal granule to be added. \r\n         * @returns {number} - the index of the given temporal granule.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'addTemporalGranule',\n        value: function addTemporalGranule(temporalGranule) {\n            if (this.temporalGranulesMap.has(temporalGranule)) return this.temporalGranulesMap.get(temporalGranule);else {\n                this.temporalGranulesMap.set(temporalGranule, this.granuleIndex);\n                return this.granuleIndex++;\n            }\n        }\n\n        /**\r\n         * Add the given temporal granule to the set of existing temporal granules.\r\n         * @param {string|number} temporalGranule - The temporal granule to add to the set of temporal granules.\r\n         */\n\n    }, {\n        key: 'addTemporalGranuleToSet',\n        value: function addTemporalGranuleToSet(temporalGranule) {\n            this.granules.add(temporalGranule);\n        }\n\n        /**\r\n         * Add temporal granules to the set of temporal granules.\r\n         * @param {Set<string>} temporalGranules - The temporal granules. \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'addTemporalGranulesToSet',\n        value: function addTemporalGranulesToSet(temporalGranules) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = temporalGranules.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var temporalGranule = _step2.value;\n\n                    this.addTemporalGranuleToSet(temporalGranule);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        }\n\n        /**\r\n         * Returns the Set of temporal granules.\r\n         * @returns {Set<string>} - the Set of temporal granules. \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getTemporalGranulesSet',\n        value: function getTemporalGranulesSet() {\n            return this.granules;\n        }\n\n        /**\r\n         * Returns the temporal granules that exist on the dataset. E.g. 2016, 2017 etc\r\n         * @returns {Map<number, number>} - the temporal granules that exist on the dataset.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getTemporalGranules',\n        value: function getTemporalGranules() {\n            return this.temporalGranulesMap; //Array.from(this.temporalGranulesMap.keys());\n        }\n\n        /**\r\n         * Returns true if the temporal granule values were given, false, otherwise.\r\n         * @returns {booelan} - true if the temporal granule values were given, false, otherwise.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'classCalculationRequired',\n        value: function classCalculationRequired() {\n            return true;\n        }\n\n        /**\r\n         * Sort the temporal granules creating an array with those sorted elements.\r\n         * If the elements are dates then order by date, if they are numbers order by number.\r\n         * @returns {Array<string|number>} - the sorted temporal granules, sorted by date/number.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'sortTemporalGranules',\n        value: function sortTemporalGranules() {\n            var availableGranularites = this._getAvailableGranularities();\n            var tgs = this.getTemporalGranules().keys();\n            var granularitiesArray = []; // \n            var strToTGMap = new Map(); // 26_1_0 => 1 January 2016\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = tgs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var tg = _step3.value;\n\n                    var strGranularity = void 0;\n                    switch (this.granularity) {\n                        case availableGranularites[1]:\n                            //Month\n                            strGranularity = this._getMonth(tg);\n                            break;\n                        case availableGranularites[2]:\n                            //Day\n                            strGranularity = this._getDay(tg);\n                            break;\n                        default:\n                            strGranularity = tg;\n                            break;\n                    }\n                    granularitiesArray.push(strGranularity);\n                    strToTGMap.set(strGranularity, tg);\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            this.strToTemporalGranuleMap = strToTGMap;\n            this.sortedTemporalGranulesArr = granularitiesArray.sort(function (a, b) {\n                return new Date(a) - new Date(b);\n            });\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = this.sortedTemporalGranulesArr.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var _step4$value = _slicedToArray(_step4.value, 2),\n                        i = _step4$value[0],\n                        sortedTG = _step4$value[1];\n\n                    this.sortedTGsToIndexMap.set(sortedTG, i);\n                } /*   console.warn(this.sortedTemporalGranulesArr);\r\n                    console.warn(this.strToTemporalGranuleMap);\r\n                    console.warn(this.sortedTGsToIndexMap); */\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n\n            this._sortTemporalGranulesMap();\n            return this.sortedTemporalGranulesArr;\n        }\n\n        /**\r\n         * Sort the temporal granules strings (read from file) to the indices of the sorted\r\n         * temporal granules.\r\n         * @private\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: '_sortTemporalGranulesMap',\n        value: function _sortTemporalGranulesMap() {\n            var sortedIndexMap = new Map();\n            var sortedTGsToIndexMap = this.sortedTGsToIndexMap; //January 2017 -> 0, February 2017 -> 1\n            var strToTGMap = this.strToTemporalGranuleMap; //January 2017 -> 2017_1, February 2017 -> 2017_2\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = sortedTGsToIndexMap.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var key = _step5.value;\n\n                    sortedIndexMap.set(strToTGMap.get(key), sortedTGsToIndexMap.get(key));\n                } //2017_1 -> 0\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            this.temporalGranulesMap = sortedIndexMap;\n        }\n\n        /**\r\n         * Returns the locale month string. \r\n         * In portugal will return 'janeiro', 'fevereiro' etc... \r\n         * @param {string} dateString - The date string read from the file.\r\n         * @returns {string} - the locale month string.\r\n         * @private\r\n         * @see https://stackoverflow.com/a/18648314/\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: '_getLocaleMonth',\n        value: function _getLocaleMonth(dateString) {\n            var date = new Date(dateString.replace(/_/g, '-'));\n            return date.toLocaleString(\"en-us\", { month: \"long\" });\n        }\n\n        /**\r\n         * Returns the month name plus the year.\r\n         * @param {string} dateString \r\n         * @returns {string} - the month name plus the year.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: '_getMonth',\n        value: function _getMonth(dateString) {\n            var date = new Date(dateString.replace(/_/g, '-'));\n            var monthName = this._getLocaleMonth(dateString);\n            var year = date.getFullYear();\n            return monthName + \" \" + year;\n        }\n\n        /**\r\n         * Get the date including the day (day month year).\r\n         * @param {string} dateString - The date string read from the file.\r\n         * @returns {string} - the date including the day.\r\n         * @see https://stackoverflow.com/a/18648314/\r\n         * @private\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: '_getDay',\n        value: function _getDay(dateString) {\n            var date = new Date(dateString.replace(/_/g, '-'));\n            var monthName = this._getLocaleMonth(dateString);\n            var day = date.getDate();\n            var year = date.getFullYear();\n            return day + \" \" + monthName + \" \" + year;\n        }\n\n        /**\r\n         * Returns the index of the temporal granule given by the string. \r\n         * @param {string|number} temporalgranuleStr - The temporal granule string representation.\r\n         * @returns {number} - the index of the temporal granule given by the string.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getGranuleIndexFromStr',\n        value: function getGranuleIndexFromStr(temporalgranuleStr) {\n            var key = this.strToTemporalGranuleMap.get(temporalgranuleStr);\n            return this.temporalGranulesMap.get(key);\n        }\n\n        /**\r\n         * Returns the index of the temporal granule read from the file.\r\n         * @param {string} str - The given string \r\n         * @returns {number} - the index of the temporal granule read from the file.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getTGMapIndex',\n        value: function getTGMapIndex(str) {\n            return this.temporalGranulesMap.get(str);\n        }\n\n        /**\r\n         * Returns the sorted temporal granules. \r\n         * @returns {Array<string|number>} - the sorted temporal granules.  \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getSortedTemporalGranules',\n        value: function getSortedTemporalGranules() {\n            return this.sortedTemporalGranulesArr;\n        }\n\n        /**\r\n         * Returns the first temporal granule from the sorted list of temporal granules.\r\n         * @returns {string|number} - the first temporal granule from the sorted list of temporal granules.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getFirstTemporalGranule',\n        value: function getFirstTemporalGranule() {\n            return this.sortedTemporalGranulesArr[0];\n        }\n\n        /**\r\n         * Returns the indices of the temporal granules between the start and end temporal granules string representations.\r\n         * @param {any} startTGStr - The string representation of the range start temporal granule. \r\n         * @param {any} endTGStr - The string representation of the range end temporal granule. \r\n         * @returns {Array<number>} - the indices of the temporal granules between the given start and end temporal granules.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getRangeIndices',\n        value: function getRangeIndices(startTGStr, endTGStr) {\n            var _ref = [this.sortedTGsToIndexMap.get(startTGStr), this.sortedTGsToIndexMap.get(endTGStr)],\n                sortedStartIndex = _ref[0],\n                sortedEndIndex = _ref[1];\n\n            var sortedTGsArrSliced = this.sortedTemporalGranulesArr.slice(sortedStartIndex, sortedEndIndex + 1);\n            var rangeIndices = [];\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = sortedTGsArrSliced[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var sortedTG = _step6.value;\n\n                    rangeIndices.push(this.getGranuleIndexFromStr(sortedTG));\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n\n            return rangeIndices;\n        }\n\n        /**\r\n         * Returns the index of the given temporal granule string/number. \r\n         * The index is the value associated with  the given key.\r\n         * @param {string|number} sortedTemporalGranule - The temporal granule string/number.\r\n         * @returns {number} - the index of the given temporal granule string/number. \r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'getSortedIndexFromStr',\n        value: function getSortedIndexFromStr(sortedTemporalGranule) {\n            return this.sortedTGsToIndexMap.get(sortedTemporalGranule);\n        }\n\n        /**\r\n         * Returns the index of the next temporal granule on the \"timeline\".\r\n         * @param {string|number} currentTG - The current temporal granule.\r\n         * @returns {number} - the index of the next temporal granule on the \"timeline\".\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'findNextTGIndex',\n        value: function findNextTGIndex(currentTG) {\n            var indexSortedTG = this.sortedTGsToIndexMap.get(currentTG);\n            var lastTG = this.sortedTemporalGranulesArr.length - 1;\n            var nextSortedTG = this.sortedTemporalGranulesArr[indexSortedTG < lastTG ? indexSortedTG + 1 : indexSortedTG]; //Avoid it going over the last index\n            return this.getSortedIndexFromStr(nextSortedTG);\n        }\n\n        /**\r\n         * Returns the index of the previous temporal granule on the \"timeline\".\r\n         * @param {string|number} currentTG - The current temporal granule.\r\n         * @returns {number} - the index of the previous temporal granule on the \"timeline\".\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'findPreviousTGIndex',\n        value: function findPreviousTGIndex(currentTG) {\n            var indexSortedTG = this.sortedTGsToIndexMap.get(currentTG);\n            var previousTG = this.sortedTemporalGranulesArr[indexSortedTG >= 1 ? indexSortedTG - 1 : indexSortedTG]; //Avoid it going bellow 0\n            return this.getSortedIndexFromStr(previousTG);\n        }\n\n        /**\r\n         * Returns true if the temporal granules are numbers.\r\n         * @returns {boolean} - true if the temporal granules are numbers, false, otherwise.\r\n         * @memberof TimeVariable\r\n         */\n\n    }, {\n        key: 'temporalGranulesAreNumbers',\n        value: function temporalGranulesAreNumbers() {\n            return _GisplayDefaults.GisplayDefaults.isNumber(this.getFirstTemporalGranule()); //typeof this.getFirstTemporalGranule() === 'number';\n        }\n    }]);\n\n    return TimeVariable;\n}(_DataVariable2.DataVariable);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./src/Gisplay/VVs/URLVariable.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Represents the url variable that is given by the programmer in the parsing options.\r\n * @export\r\n * @class URLVariable\r\n */\nvar URLVariable = exports.URLVariable = function () {\n    /**\r\n     * Creates an instance of URLVariable.\r\n     * @param {File|string} dataURL - URL of the data to read.  \r\n     * @param {File|string} geoSpatialURL - URL of the geometry and identifiers to read.\r\n     * @param {string} idOnDataURL - The id of the geometry in the data URL.\r\n     * @param {string} idOnGeoSpatialURL - The id of the geometry in the geospatial URL.\r\n     * @memberof URLVariable\r\n     */\n    function URLVariable(dataURL, geoSpatialURL, idOnDataURL, idOnGeoSpatialURL) {\n        _classCallCheck(this, URLVariable);\n\n        /**\r\n         * The data url file handler.\r\n         * @type {File|URL}\r\n         */\n        this.dataURL = dataURL;\n        /**\r\n         * The geospatial url file handler.\r\n         * @type {File|URL}\r\n         */\n        this.geoSpatialURL = geoSpatialURL;\n        /**\r\n         * The id of the geometry on the data url.\r\n         * @type {string}\r\n         */\n        this.idOnDataURL = idOnDataURL;\n        /**\r\n         * The id of the geometry on the geospatial url. \r\n         * @type {string}\r\n         */\n        this.idOnGeoSpatialURL = idOnGeoSpatialURL;\n    }\n\n    /**\r\n     * Returns the data URL.\r\n     * @returns {File|URL} - The data URL.\r\n     * @memberof URLVariable\r\n     */\n\n\n    _createClass(URLVariable, [{\n        key: 'getDataURL',\n        value: function getDataURL() {\n            return this.dataURL;\n        }\n\n        /**\r\n         * Returns the name of the data URL.\r\n         * @returns {string} - the name of the data URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getDataName',\n        value: function getDataName() {\n            return this.dataURL instanceof URL ? this.dataURL.href : this.dataURL.name;\n        }\n\n        /**\r\n         * Returns the size in bytes of the data URL.\r\n         * @returns {number} - the size in bytes of the data URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getDataSize',\n        value: function getDataSize() {\n            return this.dataURL instanceof URL ? 0 : this.dataURL.size;\n        }\n\n        /**\r\n         * Returns the geoSpatial URL.\r\n         * @returns {File|URL} - the geospatial URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getGeoSpatialURL',\n        value: function getGeoSpatialURL() {\n            return this.geoSpatialURL;\n        }\n\n        /**\r\n         * Returns the name of the geospatial URL.\r\n         * @returns {string} - the name of the geospatial URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getGeospatialName',\n        value: function getGeospatialName() {\n            return this.geoSpatialURL instanceof URL ? this.geoSpatialURL.href : this.geoSpatialURL.name;\n        }\n\n        /**\r\n         * Returns the size in bytes of the geospatial URL.\r\n         * @returns {number} - the size in bytes of the geospatial URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getGeospatialSize',\n        value: function getGeospatialSize() {\n            return this.geoSpatialURL instanceof URL ? 0 : this.geoSpatialURL.size;\n        }\n\n        /**\r\n         * Returns the id of the geometry in the data URL.\r\n         * @returns {string} - the id of the geometry in the data URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getIdOnDataURL',\n        value: function getIdOnDataURL() {\n            return this.idOnDataURL;\n        }\n\n        /**\r\n         * Returns the id of the geometry in the geospatial URL.\r\n         * @returns {string} - the id of the geometry in the geospatial URL.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'getIdOnGeoSpatialURL',\n        value: function getIdOnGeoSpatialURL() {\n            return this.idOnGeoSpatialURL;\n        }\n\n        /**\r\n         * Returns true if the data file is a geojson file. \r\n         * @returns {boolean} - true, if the data file is a geojson file, false, otherwise.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'dataURLisGeoJSON',\n        value: function dataURLisGeoJSON() {\n            return this._isGeoJSON(this.getDataName());\n        }\n\n        /**\r\n         * Returns true if the dataURL is an instance of URL.\r\n         * @returns {boolean} - true if the dataURL is an instance of URL, false, otherwise\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'dataURLisRemote',\n        value: function dataURLisRemote() {\n            return this.dataURL instanceof URL;\n        }\n\n        /**\r\n         * Returns true if the data URL is a remote file. \r\n         * @returns {boolean} - true, if the data URL is a remote file, false, otherwise.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'geoSpatialURLisGeoJSON',\n        value: function geoSpatialURLisGeoJSON() {\n            return this.geoSpatialURL !== undefined && this._isGeoJSON(this.getGeospatialName());\n        }\n\n        /**\r\n         * Returns true if the geospatial URL is a remote file. \r\n         * @returns {boolean} - true, if the geospatial URL is a remote file, false, otherwise.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'geoSpatialURLisRemote',\n        value: function geoSpatialURLisRemote() {\n            return this.geoSpatialURL instanceof URL;\n        }\n\n        /**\r\n         * Verifies if the given name is a GeoJSON file.\r\n         * @param {string} name - The name of the file. \r\n         * @returns {boolean} - true, if it's a geojson file, false, otherwise.\r\n         * @private\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: '_isGeoJSON',\n        value: function _isGeoJSON(name) {\n            return name.endsWith('.json') || name.endsWith('.geojson');\n        }\n\n        /**\r\n         * Returns true, if both ids exist, false otherwise.\r\n         * @returns {boolean} - true, if both ids exist, false, otherwise.\r\n         * @memberof URLVariable\r\n         */\n\n    }, {\n        key: 'hasIds',\n        value: function hasIds() {\n            return this.idOnDataURL !== undefined && this.idOnGeoSpatialURL !== undefined;\n        }\n    }]);\n\n    return URLVariable;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/* no static exports found */
/* all exports used */
/*!*********************************************************************************************!*\
  !*** ./~/babel-loader/lib?{"presets":["es2015"]}!./src/Gisplay/Parser/CSV/CSVDataWorker.js ***!
  \*********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DataVariable = __webpack_require__(/*! ../../VVs/DataVariable */ 1);\n\nvar _URLVariable = __webpack_require__(/*! ../../VVs/URLVariable */ 7);\n\nvar _TimeVariable = __webpack_require__(/*! ../../VVs/TimeVariable */ 6);\n\nvar _CategoricalVariable = __webpack_require__(/*! ../../VVs/CategoricalVariable */ 3);\n\nvar _ContinuousVariable = __webpack_require__(/*! ../../VVs/ContinuousVariable */ 5);\n\nvar _GisplayDefaults = __webpack_require__(/*! ../../GisplayDefaults */ 0);\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar worker = self;\n\nvar CSVDataWorker = function () {\n    function CSVDataWorker() {\n        var _this = this;\n\n        _classCallCheck(this, CSVDataWorker);\n\n        // console.log(\"-------------------CSV Data Worker-------------------\");\n        /**\r\n         * The first row read by this data worker.\r\n         * @type {string}\r\n         */\n        this.firstWorkerRow = '';\n        /**\r\n         * The last row of the last chunk read by the parser.\r\n         * @type {string}\r\n         */\n        this.lastWorkerRow = '';\n        /**\r\n         * Save the remaining of the last row from the chunk that was read.\r\n         * It's used when a chunk didn't end in a row delimitir character.\r\n         * @type {string}\r\n         */\n        this.remainingChunkRow = '';\n\n        /**\r\n         * The data file.\r\n         * @type {File}\r\n         */\n        this.dataFile = null;\n        /**\r\n         * The start byte for this worker.\r\n         * @type {number}\r\n         */\n        this.startByte = 0;\n        /**\r\n         * The end byte for this worker.\r\n         * @type {number}\r\n         */\n        this.endByte = 0;\n        /**\r\n         * The size of each chunk to read from the file.\r\n         * @type {number}\r\n         */\n        this.chunkSize = 0;\n        /**\r\n         * The index of this worker. DELETE?\r\n         * @type {number}\r\n         */\n        this.workerIndex = -1;\n        /**\r\n         * Number of columns for each row. DELETE?\r\n         * @type {number}\r\n         */\n        this.numColumnsPerRow = -1; //NOT USED ATM\n\n        /**\r\n         * The row delimiter.\r\n         * @type {string}\r\n         */\n        this.rowDelimiter = '';\n        /**\r\n         * The column delimiter.\r\n         * @type {string}\r\n         */\n        this.columnDelimiter = '';\n\n        /**\r\n         * The header indices. \r\n         * The array is split into 5 positions: [0]categorical, [1]continuous, [2]geometry, [3]time and [4]optional variables. \r\n         * @type {Array<Array<number>>}\r\n         */\n        this.headerIndices = [];\n\n        //TIME \n        /**\r\n         * The time variable.\r\n         * @type {TimeVariable}\r\n         */\n        this.timeVariable = null;\n        /**\r\n         * The granularity of the time variable.\r\n         * @type {string}\r\n         */\n        this.timeGranularity = '';\n\n        //CATEGORICAL\n        /**\r\n         * The categorical variables present in the user options.\r\n         * @type {Array<CategoricalVariable>}\r\n         */\n        this.categoricalVariables = [];\n        /**\r\n         * If the options contain any categorical variable.\r\n         * @type {boolean}\r\n         */\n        this.hasCategoricalVariables = false;\n\n        //CONTINUOUS\n        /**\r\n         * The continuous variables.\r\n         * @type {Array<ContinuousVariable>}\r\n         */\n        this.continuousVariables = [];\n\n        //OPTIONAL\n        /**\r\n         * The optional variables.\r\n         * @type {Array<DataVariable>}\r\n         */\n        this.optionalVariables = [];\n\n        /**\r\n         * The FileReader used to read a portion of the file.\r\n         * @type {FileReader}\r\n         */\n        this.reader = this.createFileReader();\n        worker.onmessage = function (e) {\n            _this.onMessage(e.data);\n        };\n\n        //SAVE INFORMATION\n        /**\r\n         * Used to save the rows directly read from the file\r\n         * @type {Array<Array<string|number>>}\r\n         */\n        this.dataRowsSaved = []; //Save rows read by this Worker\n        /**\r\n         * The final data rows which contain all information to be sent to the main thread.\r\n         * @type {Array<Array<{continuousData: Array<Array<number>>, spatialData: Array<number>,optionalData: Array<Array<number|string>>, RGBA: Array<number>, numberRGBA: Array<number>}>>}\r\n         */\n        this.finalDataRows = [];\n        // this.numRowsRead = 0;\n\n        /** \r\n         * Will be true when we want to process the last line.\r\n         * @type {boolean}\r\n         */\n        this.isLastLine = false;\n    }\n\n    /**\r\n     * Create file reader.\r\n     * @returns {FileReader} - the FileReader used to read a portion of the file.\r\n     * @memberof CSVDataWorker\r\n     */\n\n\n    _createClass(CSVDataWorker, [{\n        key: 'createFileReader',\n        value: function createFileReader() {\n            var _this2 = this;\n\n            var reader = new FileReader();\n            reader.onload = function (e) {\n                _this2.chunkReadFromFile(e);\n            };\n            reader.onerror = function (e) {\n                console.error(e);\n            };\n            return reader;\n        }\n\n        /**\r\n         * When the worker receives a message. \r\n         * @param {{protocolMessage: string, messageData:Object}} dataMessage - The data message that was sent by the main Thread.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'onMessage',\n        value: function onMessage(dataMessage) {\n            // console.log(\"-------------------CSV Data Worker-------------------\");\n            // console.log(dataMessage);\n            var protocolMessages = _GisplayDefaults.GisplayDefaults.MESSAGES_CSV();\n            switch (dataMessage.protocolMessage) {\n                case protocolMessages.TO_START:\n                    {\n                        //Worker processed it's part\n                        //File and chunk information\n                        var workerOptions = dataMessage.messageData.workerOptions;\n                        this.dataFile = workerOptions.dataFile;\n                        this.startByte = workerOptions.startByte;\n                        this.endByte = workerOptions.endByte;\n                        this.chunkSize = workerOptions.chunkSize;\n                        this.workerIndex = workerOptions.workerIndex;\n                        this.numColumnsPerRow = workerOptions.numColumnsPerRow;\n                        this.rowDelimiter = workerOptions.rowDelimiter;\n                        this.columnDelimiter = workerOptions.columnDelimiter;\n                        //Indices and class calc\n                        this.headerIndices = workerOptions.headerIndices;\n                        //Save Categorical/Continuous and time Vars\n                        this._saveVariables(dataMessage.messageData.workerOptions);\n                        //Start reading file\n                        this.readNextChunk();\n                        break;\n                    }\n                case protocolMessages.TO_LIMITS_CAT:\n                    {\n                        console.log(\"TO_LIMIT_CAT\");\n                        var catVarsCategoriesMap = new Map();\n                        var _iteratorNormalCompletion = true;\n                        var _didIteratorError = false;\n                        var _iteratorError = undefined;\n\n                        try {\n                            for (var _iterator = this.categoricalVariables[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                                var catVar = _step.value;\n\n                                catVarsCategoriesMap.set(catVar.getInternalName(), catVar.getCategories());\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return) {\n                                    _iterator.return();\n                                }\n                            } finally {\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n\n                        var contVarsMinMaxMap = new Map();\n                        var _iteratorNormalCompletion2 = true;\n                        var _didIteratorError2 = false;\n                        var _iteratorError2 = undefined;\n\n                        try {\n                            for (var _iterator2 = this.continuousVariables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                                var contVar = _step2.value;\n\n                                contVarsMinMaxMap.set(contVar.getInternalName(), [contVar.getMin(), contVar.getMax()]);\n                            } // console.log(this.workerIndex, catVarsCategoriesMap, contVarsMinMaxMap, this.timeVariable, this.timeVariable.getTemporalGranulesSet())\n                        } catch (err) {\n                            _didIteratorError2 = true;\n                            _iteratorError2 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                                    _iterator2.return();\n                                }\n                            } finally {\n                                if (_didIteratorError2) {\n                                    throw _iteratorError2;\n                                }\n                            }\n                        }\n\n                        worker.postMessage({\n                            protocolMessage: protocolMessages.END_LIMITS_CAT,\n                            messageData: {\n                                categoricalVariables: catVarsCategoriesMap,\n                                continousVariables: contVarsMinMaxMap,\n                                timeVariable: this.timeVariable ? this.timeVariable.getTemporalGranulesSet() : this.timeVariable\n                            }\n                        });\n                        break;\n                    }\n                case protocolMessages.TO_LIMITS_CAT_RES:\n                    {\n                        var continousVarsMinMax = dataMessage.messageData;\n                        var _iteratorNormalCompletion3 = true;\n                        var _didIteratorError3 = false;\n                        var _iteratorError3 = undefined;\n\n                        try {\n                            for (var _iterator3 = this.continuousVariables.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                                var _step3$value = _slicedToArray(_step3.value, 2),\n                                    i = _step3$value[0],\n                                    _contVar = _step3$value[1];\n\n                                _contVar.setMinMax(continousVarsMinMax[i][0]);\n                                _contVar.setMinMax(continousVarsMinMax[i][1]);\n                                _contVar.setStep(); //Update step value\n                            }\n\n                            //Loop through data and calculate bins for each continuous variable\n                        } catch (err) {\n                            _didIteratorError3 = true;\n                            _iteratorError3 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                    _iterator3.return();\n                                }\n                            } finally {\n                                if (_didIteratorError3) {\n                                    throw _iteratorError3;\n                                }\n                            }\n                        }\n\n                        var contPosStart = this.categoricalVariables.length;\n                        var contPosEnd = contPosStart + this.continuousVariables.length;\n                        var _iteratorNormalCompletion4 = true;\n                        var _didIteratorError4 = false;\n                        var _iteratorError4 = undefined;\n\n                        try {\n                            for (var _iterator4 = this.dataRowsSaved[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                                var data = _step4.value;\n\n                                for (var i = contPosStart; i < contPosEnd; i++) {\n                                    this.continuousVariables[i - contPosStart].addValueToBins(data[i]);\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError4 = true;\n                            _iteratorError4 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                    _iterator4.return();\n                                }\n                            } finally {\n                                if (_didIteratorError4) {\n                                    throw _iteratorError4;\n                                }\n                            }\n                        }\n\n                        var histograms = [];\n                        var _iteratorNormalCompletion5 = true;\n                        var _didIteratorError5 = false;\n                        var _iteratorError5 = undefined;\n\n                        try {\n                            for (var _iterator5 = this.continuousVariables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                                var _contVar2 = _step5.value;\n\n                                histograms.push(_contVar2.getHistogram());\n                            } // console.log(this.continuousVariables[0].getHistogram());\n                        } catch (err) {\n                            _didIteratorError5 = true;\n                            _iteratorError5 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                                    _iterator5.return();\n                                }\n                            } finally {\n                                if (_didIteratorError5) {\n                                    throw _iteratorError5;\n                                }\n                            }\n                        }\n\n                        worker.postMessage({\n                            protocolMessage: protocolMessages.END_LIMITS_CAT_RES,\n                            messageData: {\n                                histograms: histograms\n                            }\n                        });\n                        break;\n                    }\n                case protocolMessages.TO_JOIN_DATA:\n                    {\n                        //Process data and then send the res data\n                        if (this.workerIndex === 0) {\n                            console.log(\"I will process the data....NOT\");\n                            console.log(dataMessage.messageData);\n                        }\n\n                        var catVars = dataMessage.messageData.categoricalVariables;\n                        var _iteratorNormalCompletion6 = true;\n                        var _didIteratorError6 = false;\n                        var _iteratorError6 = undefined;\n\n                        try {\n                            for (var _iterator6 = catVars.entries()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                                var _step6$value = _slicedToArray(_step6.value, 2),\n                                    _i2 = _step6$value[0],\n                                    _catVar = _step6$value[1];\n\n                                this.categoricalVariables[_i2].valueToIndexMap = _catVar.valueToIndexMap;\n                            }\n                        } catch (err) {\n                            _didIteratorError6 = true;\n                            _iteratorError6 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                    _iterator6.return();\n                                }\n                            } finally {\n                                if (_didIteratorError6) {\n                                    throw _iteratorError6;\n                                }\n                            }\n                        }\n\n                        var contVars = dataMessage.messageData.continuousVariables;\n                        var _iteratorNormalCompletion7 = true;\n                        var _didIteratorError7 = false;\n                        var _iteratorError7 = undefined;\n\n                        try {\n                            for (var _iterator7 = contVars.entries()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                                var _step7$value = _slicedToArray(_step7.value, 2),\n                                    _i3 = _step7$value[0],\n                                    _contVar3 = _step7$value[1];\n\n                                this.continuousVariables[_i3].classIntervals = _contVar3.classIntervals;\n                            }\n                        } catch (err) {\n                            _didIteratorError7 = true;\n                            _iteratorError7 = err;\n                        } finally {\n                            try {\n                                if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                                    _iterator7.return();\n                                }\n                            } finally {\n                                if (_didIteratorError7) {\n                                    throw _iteratorError7;\n                                }\n                            }\n                        }\n\n                        var tVar = dataMessage.messageData.timeVariable;\n                        if (tVar) this.timeVariable.temporalGranulesMap = tVar.temporalGranulesMap;\n\n                        var msgData = dataMessage.messageData;\n                        var mvcs = msgData.mvcs,\n                            numberMVCs = mvcs.size,\n                            numberTGs = msgData.numberTGs;\n                        this._joinData(mvcs, numberTGs);\n\n                        var numTotalElements = 0; //Create array to send information about this worker\n                        console.error(this.finalDataRows);\n                        /*    if (this.continuousVariables.length > 0) {\r\n                               for (let i = 0; i < numberMVCs; i++)\r\n                                   for (let j = 0; j < numberTGs; j++)\r\n                                       numTotalElements += this.finalDataRows[i][j].continuousData[0].length;\r\n                           } else {\r\n                               // throw new Error(\"\"); */\n                        for (var _i = 0; _i < numberMVCs; _i++) {\n                            for (var j = 0; j < numberTGs; j++) {\n                                if (this.headerIndices[2].length) numTotalElements += this.finalDataRows[_i][j].spatialData.length / 2; //Lat/Lng\n                                else numTotalElements += this.finalDataRows[_i][j].spatialData.length; //Ids\n                            }\n                        }\n                        // }\n                        console.warn(numTotalElements);\n\n                        worker.postMessage({\n                            protocolMessage: protocolMessages.END_JOIN_DATA,\n                            messageData: {\n                                numTotalElements: numTotalElements,\n                                workerIndex: this.workerIndex\n                            }\n                        });\n                        break;\n                    }\n                case protocolMessages.TO_GENERATE_RGBA:\n                    {\n                        // Should Generate RGBAs for all MVCs/TGs \n                        this._generateRGBACodes(dataMessage.messageData);\n                        worker.postMessage({ protocolMessage: protocolMessages.END_GENERATE_RGBA });\n                        break;\n                    }\n                case protocolMessages.TO_SEND_DATA:\n                    {\n                        worker.postMessage({\n                            protocolMessage: protocolMessages.END_SEND_DATA,\n                            messageData: {\n                                finalDataRows: this.finalDataRows\n                            }\n                        });\n                        break;\n                    }\n            }\n        }\n\n        /**\r\n         * Generate RGBA codes for each element in each MVC/TG.\r\n         * @param {Array<Array<number>} startRGBANum - The start RGBA number for this worker.. \r\n         * @memberof CSVNewDataWorker\r\n         */\n\n    }, {\n        key: '_generateRGBACodes',\n        value: function _generateRGBACodes(startRGBANum) {\n            var numMVCs = this.finalDataRows.length,\n                numTGs = this.finalDataRows[0].length;\n            for (var i = 0; i < numMVCs; i++) {\n                // let startRGBA = startingRGBANumber[i],\n                // let startRGBANum = GisplayDefaults.RGBAToNumber(...startRGBA);\n                for (var j = 0; j < numTGs; j++) {\n                    var numberOfElements = 0;\n                    if (this.headerIndices[2].length) numberOfElements = this.finalDataRows[i][j].spatialData.length / 2; //Lat/Lng\n                    else numberOfElements = this.finalDataRows[i][j].spatialData.length; //Ids\n                    // let continuousDataLength = this.finalDataRows[i][j].continuousData[0].length; //Using continuous data that might not exist\n                    if (numberOfElements > 0) {\n                        for (var k = 0; k < numberOfElements; k++) {\n                            var _finalDataRows$i$j$RG;\n\n                            var RGBA = _GisplayDefaults.GisplayDefaults.numberToRGBA(startRGBANum);\n                            (_finalDataRows$i$j$RG = this.finalDataRows[i][j].RGBA).push.apply(_finalDataRows$i$j$RG, _toConsumableArray(RGBA));\n                            this.finalDataRows[i][j].numberRGBA.push(startRGBANum++);\n                        }\n                    }\n                }\n            }\n            this.verifyIntegrityRGBA(numMVCs, numTGs);\n        }\n    }, {\n        key: 'verifyIntegrityRGBA',\n        value: function verifyIntegrityRGBA(numMVCs, numTGs) {\n            // console.warn(\"VERIFY INTEGRITY\")\n            for (var i = 0; i < numMVCs; i++) {\n                for (var j = 0; j < numTGs; j++) {\n                    var continuousDataLength = 0;\n                    if (this.headerIndices[2].length) continuousDataLength = this.finalDataRows[i][j].spatialData.length / 2; //Lat/Lng\n                    else continuousDataLength = this.finalDataRows[i][j].spatialData.length; //Ids\n                    if (continuousDataLength > 0) for (var k = 0; k < continuousDataLength - 1; k++) {\n                        console.assert(this.finalDataRows[i][j].numberRGBA[k] + 1 === this.finalDataRows[i][j].numberRGBA[k + 1]);\n                    }\n                }\n            }\n        }\n\n        /**\r\n         * Join the data into MVCs and TGs.\r\n         * @param {Map<string, number>} mvcs - The generated MVCs map and respective index.\r\n         * @param {number} numberTGs - The number of temporal granules.\r\n         * @memberof CSVNewDataWorker\r\n         */\n\n    }, {\n        key: '_joinData',\n        value: function _joinData(mvcs, numberTGs) {\n            //Loop through rows and copy them to the final array\n            //categorical vars and time var can be ignored (they are known by the arrays indices)\n            //Save cont vars, geometry, opt vars and RGBA value\n\n            var hasIds = this.headerIndices[2].length ? false : true;\n            var geoPositions = hasIds ? 1 : 2;\n\n            // console.warn(this.timeVariable, mvcs);\n            var numberMVCs = mvcs.size,\n                numCatVars = this.categoricalVariables.length,\n                numContVars = this.continuousVariables.length,\n                geoStartPos = numCatVars + numContVars,\n                geoEndPos = geoStartPos + geoPositions,\n                timePos = geoEndPos;\n\n            this.finalDataRows = this._createFinalRows(numberMVCs, numberTGs);\n            //For each row saved then split it to its place\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n                for (var _iterator8 = this.dataRowsSaved[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                    var rowSaved = _step8.value;\n\n                    var finalRow = [];\n                    var combination = '';\n\n                    var _iteratorNormalCompletion9 = true;\n                    var _didIteratorError9 = false;\n                    var _iteratorError9 = undefined;\n\n                    try {\n                        for (var _iterator9 = this.categoricalVariables.entries()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                            var _step9$value = _slicedToArray(_step9.value, 2),\n                                _i6 = _step9$value[0],\n                                catVar = _step9$value[1];\n\n                            combination += catVar.findIndex(rowSaved[_i6]);\n                        }\n                    } catch (err) {\n                        _didIteratorError9 = true;\n                        _iteratorError9 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                                _iterator9.return();\n                            }\n                        } finally {\n                            if (_didIteratorError9) {\n                                throw _iteratorError9;\n                            }\n                        }\n                    }\n\n                    var contValues = [];\n                    var _iteratorNormalCompletion10 = true;\n                    var _didIteratorError10 = false;\n                    var _iteratorError10 = undefined;\n\n                    try {\n                        for (var _iterator10 = this.continuousVariables.entries()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                            var _step10$value = _slicedToArray(_step10.value, 2),\n                                j = _step10$value[0],\n                                contVar = _step10$value[1];\n\n                            var contValue = rowSaved[j + numCatVars];\n                            combination += contVar.findClassIntervalIndex(contValue);\n                            contValues.push(contValue);\n                        }\n                    } catch (err) {\n                        _didIteratorError10 = true;\n                        _iteratorError10 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                                _iterator10.return();\n                            }\n                        } finally {\n                            if (_didIteratorError10) {\n                                throw _iteratorError10;\n                            }\n                        }\n                    }\n\n                    var mvcIndex = mvcs.get(combination);\n                    var tgIndex = this.timeVariable !== undefined ? this.timeVariable.getTGMapIndex(rowSaved[timePos]) : 0;\n                    if (tgIndex === undefined) console.error(\"HERE\");\n                    for (var i = 0; i < contValues.length; i++) {\n                        this.finalDataRows[mvcIndex][tgIndex].continuousData[i].push(contValues[i]);\n                    }for (var _i4 = geoStartPos; _i4 < geoEndPos; _i4++) {\n                        this.finalDataRows[mvcIndex][tgIndex].spatialData.push(rowSaved[_i4]);\n                    }for (var _i5 = timePos + 1; _i5 < rowSaved.length; _i5++) {\n                        this.finalDataRows[mvcIndex][tgIndex].optionalData[_i5 - timePos - 1].push(rowSaved[_i5]);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError8 = true;\n                _iteratorError8 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                        _iterator8.return();\n                    }\n                } finally {\n                    if (_didIteratorError8) {\n                        throw _iteratorError8;\n                    }\n                }\n            }\n\n            this.dataRowsSaved = undefined; //Allows Garbage collection\n        }\n\n        /**\r\n         * Create the final row to hold the information that the worker should send at the end to the main thread.\r\n         * @param {number} numberMVCs - Number of existing map variable combinations.\r\n         * @param {number} numberTGs - Number of existing temporal granules . \r\n         * @returns {Array<any>} - the final row to hold the information that the worker should send at the end to the main thread.\r\n         * @memberof CSVNewDataWorker\r\n         */\n\n    }, {\n        key: '_createFinalRows',\n        value: function _createFinalRows(numberMVCs, numberTGs) {\n            var finalRows = [];\n\n            //Create arrays for optionalData\n            var optionalDataArrays = [];\n            for (var i = 0; i < this.optionalVariables.length; i++) {\n                //Create multiple arrays one for each optional variable\n                optionalDataArrays[i] = [];\n            }var continuosDataArrays = [];\n            for (var _i7 = 0; _i7 < this.continuousVariables.length; _i7++) {\n                //Create multiple arrays one for each optional variable\n                continuosDataArrays[_i7] = [];\n            } //Create array for final Rows\n            for (var _i8 = 0; _i8 < numberMVCs; _i8++) {\n                finalRows[_i8] = [];\n                for (var j = 0; j < numberTGs; j++) {\n                    finalRows[_i8][j] = {\n                        continuousData: _GisplayDefaults.GisplayDefaults.cloneNestedArray(continuosDataArrays),\n                        spatialData: [],\n                        optionalData: _GisplayDefaults.GisplayDefaults.cloneNestedArray(optionalDataArrays),\n                        RGBA: [],\n                        numberRGBA: []\n                    };\n                }\n            }\n            // console.log(finalRows);\n            return finalRows;\n        }\n\n        /**\r\n         * Recreate the variables sent by the main thread.\r\n         * @param {{continousVariables: Array<ContinuousVariable>, categoricalVariables: Array<CategoricalVariable>, timeVariable: TimeVariable}} data - Data sent by the main thread.\r\n         * @memberof CSVNewDataWorker\r\n         */\n\n    }, {\n        key: '_saveVariables',\n        value: function _saveVariables(data) {\n            var contVars = [];\n            var _iteratorNormalCompletion11 = true;\n            var _didIteratorError11 = false;\n            var _iteratorError11 = undefined;\n\n            try {\n                for (var _iterator11 = data.continuousVariables[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                    var contVar = _step11.value;\n\n                    console.log(contVar);\n                    contVars.push(new _ContinuousVariable.ContinuousVariable(contVar.externalName, contVar.internalName, contVar.typeOfVisualVariable, contVar.shaderVariableQualifier, contVar.visualVariableMapping, contVar.classBreaks, contVar.numberOfClasses, contVar.classBreakMethod, contVar.classBreakMethodParams));\n                }\n                // let doa = true;\n                // if (doa) {\n            } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                        _iterator11.return();\n                    }\n                } finally {\n                    if (_didIteratorError11) {\n                        throw _iteratorError11;\n                    }\n                }\n            }\n\n            var catVars = [];\n            var _iteratorNormalCompletion12 = true;\n            var _didIteratorError12 = false;\n            var _iteratorError12 = undefined;\n\n            try {\n                for (var _iterator12 = data.categoricalVariables[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                    var catVar = _step12.value;\n\n                    catVars.push(new _CategoricalVariable.CategoricalVariable(catVar.externalName, catVar.internalName, catVar.typeOfVisualVariable, catVar.shaderVariableQualifier, catVar.visualVariableMapping, null));\n                }\n            } catch (err) {\n                _didIteratorError12 = true;\n                _iteratorError12 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                    }\n                } finally {\n                    if (_didIteratorError12) {\n                        throw _iteratorError12;\n                    }\n                }\n            }\n\n            var tVar = data.timeVariable;\n            var timeVariable = void 0;\n            if (tVar !== undefined) {\n                timeVariable = new _TimeVariable.TimeVariable(tVar.externalName, tVar.internalName, tVar.granularity, tVar.timeControl);\n            }\n            var optVars = [];\n            var _iteratorNormalCompletion13 = true;\n            var _didIteratorError13 = false;\n            var _iteratorError13 = undefined;\n\n            try {\n                for (var _iterator13 = data.optionalVariables[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                    var optVar = _step13.value;\n\n                    optVars.push(new _DataVariable.DataVariable(optVar.externalName, optVar.internalName));\n                } //TIME\n                // this.timeVariable = workerOptions.timeVariable;\n            } catch (err) {\n                _didIteratorError13 = true;\n                _iteratorError13 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                    }\n                } finally {\n                    if (_didIteratorError13) {\n                        throw _iteratorError13;\n                    }\n                }\n            }\n\n            this.timeVariable = timeVariable;\n            this.timeGranularity = this.timeVariable ? this.timeVariable.getGranularity() : '';\n            //CATEGORICAL\n            this.categoricalVariables = catVars; //workerOptions.categoricalVariables;\n            this.hasCategoricalVariables = this.categoricalVariables.length > 0;\n            //CONTINOUS \n            this.continuousVariables = contVars; //workerOptions.continuousVariables;\n            //OPTIONAL VARS\n            this.optionalVariables = optVars;\n            // }\n        }\n\n        /**\r\n         * Reads a chunk of bytes from the file.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'readNextChunk',\n        value: function readNextChunk() {\n            var start = Math.min(this.startByte, this.endByte);\n            var end = Math.min(this.startByte + this.chunkSize, this.endByte);\n            this.reader.readAsText(this.dataFile.slice(start, end));\n        }\n\n        /**\r\n         * Reads more 1000 bytes to finish the last line of the worker.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'readLastLine',\n        value: function readLastLine() {\n            if (this.lastWorkerRow.length === 0) return true;\n            var start = Math.min(this.startByte, this.endByte);\n            var end = this.endByte + 1000;\n            this.reader.readAsText(this.dataFile.slice(start, end));\n        }\n\n        /**\r\n         * Called after a chunk is read from the file.\r\n         * @param {ProgressEvent} e - Event associated with the read data.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'chunkReadFromFile',\n        value: function chunkReadFromFile(e) {\n            if (this.isLastLine) {\n                // console.warn(\"last line\", this.workerIndex, e.target.result);\n                var rows = (this.lastWorkerRow + e.target.result).split(this.rowDelimiter);\n                // console.warn(this.workerIndex, rows);\n                this.processRows(rows, 0, 1);\n                this.sendENDStartMessage();\n            } else {\n                this.startByte += this.chunkSize;\n                this.processChunk(e.target.result);\n                if (this.startByte >= this.endByte) {\n                    // console.log(\"END\");\n                    // console.log(\"NumRows Worker\", this.workerIndex, \"is:\", this.numRowsRead, \"\\nFIRSTROW = \", this.firstWorkerRow, \"\\nLASTROW = \", this.lastWorkerRow);\n                    //Post message with first and last row\n                    // console.warn(\"worker Terminated\", this.workerIndex, this.firstWorkerRow, this.lastWorkerRow);\n                    this.isLastLine = true;\n                    var isDone = this.readLastLine();\n                    if (isDone) //Only the ones that returned true from the readLastLine() method will send back to the \n                        this.sendENDStartMessage();\n                } else this.readNextChunk();\n            }\n        }\n    }, {\n        key: 'sendENDStartMessage',\n        value: function sendENDStartMessage() {\n            console.warn(\"END\", this.workerIndex, this.dataRowsSaved.length);\n            worker.postMessage({\n                protocolMessage: _GisplayDefaults.GisplayDefaults.MESSAGES_CSV().END_START,\n                messageData: {\n                    workerIndex: this.workerIndex\n                    // firstWorkerRow: this.firstWorkerRow,\n                    // lastWorkerRow: this.lastWorkerRow\n                }\n            });\n        }\n\n        /**\r\n         * Process the chunk that was read from the file.\r\n         * @see https://developer.mozilla.org/pt-PT/docs/Web/JavaScript/Reference/Global_Objects/String/split\r\n         * @see https://image.prntscr.com/image/BkaRp8qSQuyt9phoSh71ZA.png\r\n         * @see https://image.prntscr.com/image/FAQ8CVH9S1W6X0RoZrOWfw.png - Edge case for \\r\\n.\r\n         * @see https://image.prntscr.com/image/yYXWcZwLQjSNYqIiuQEcKQ.png - Edge case example.\r\n         * @param {any} chunkText  - The text read from the file.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'processChunk',\n        value: function processChunk(chunkText) {\n            var rows = (this.remainingChunkRow + chunkText).split(this.rowDelimiter); //May not have the best performance (has to create new string due to string immutability). Could be changed but solution has to solve the EDGE CASE.\n            this.remainingChunkRow = rows[rows.length - 1];\n            var startRowIndex = 0,\n                endRowIndex = rows.length - 1; //The index to start and end the rows processing\n\n            if (!this.firstWorkerRow) {\n                //Save 1st row of this worker \n                this.firstWorkerRow = rows[0];\n                startRowIndex = 1; //Ignore first row of first chunk in any worker\n            }\n            if (!this.lastWorkerRow && this.startByte >= this.endByte) {\n                // console.log(this.workerIndex, this.lastWorkerRow);\n                this.lastWorkerRow = this.remainingChunkRow; //Save last row if it's the last chunk (See split image) \n                // console.log(this.workerIndex, rows, this.dataRowsSaved, this.firstWorkerRow, this.lastWorkerRow);\n\n                // console.error(this.workerIndex, this.remainingChunkRow);\n            }\n            this.processRows(rows, startRowIndex, endRowIndex);\n        }\n\n        /**\r\n         * Process the rows that are in the rows array. The first row of the 1st chunk read from the file should be ignored.\r\n         * @param {Array<string>} rows - The rows, each one in a position of the array. \r\n         * @param {number} startRowIndex - The row to start processing.\r\n         * @param {number} endRowIndex - The last row to process.\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'processRows',\n        value: function processRows(rows, startRowIndex, endRowIndex) {\n            var resRows = [];\n            // this.numRowsRead += (endRowIndex - startRowIndex); //DELETE\n            var categoricalIndices = this.headerIndices[0];\n            var continuousIndices = this.headerIndices[1];\n            var geometryIndices = this.headerIndices[2];\n            var hasIdGeometry = false;\n            if (+geometryIndices === +geometryIndices) {\n                geometryIndices = [geometryIndices];\n                hasIdGeometry = true;\n            }\n            var timeIndex = this.headerIndices[3];\n            var hasTime = this.timeGranularity !== ''; //OR this.timeVariable !== undefined\n            var optinalIndices = this.headerIndices[4];\n            for (var i = startRowIndex; i < endRowIndex; i++) {\n                this.numRowsRead++;\n                var columns = rows[i].split(this.columnDelimiter);\n                /* if (columns.length !== this.numColumnsPerRow) //Check for errors\r\n                    throw new Error(\"Wrong number of columns\");\r\n                 */\n                var row = [];\n\n                var _iteratorNormalCompletion14 = true;\n                var _didIteratorError14 = false;\n                var _iteratorError14 = undefined;\n\n                try {\n                    for (var _iterator14 = categoricalIndices.entries()[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                        var _step14$value = _slicedToArray(_step14.value, 2),\n                            _i9 = _step14$value[0],\n                            catIndex = _step14$value[1];\n\n                        var category = columns[catIndex];\n                        if (this.categoricalVariables[_i9].classCalculationRequired()) this.categoricalVariables[_i9].addCategory(category);\n                        row.push(category);\n                    }\n                } catch (err) {\n                    _didIteratorError14 = true;\n                    _iteratorError14 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                            _iterator14.return();\n                        }\n                    } finally {\n                        if (_didIteratorError14) {\n                            throw _iteratorError14;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion15 = true;\n                var _didIteratorError15 = false;\n                var _iteratorError15 = undefined;\n\n                try {\n                    for (var _iterator15 = continuousIndices.entries()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                        var _step15$value = _slicedToArray(_step15.value, 2),\n                            _i10 = _step15$value[0],\n                            contIndex = _step15$value[1];\n\n                        var value = +columns[contIndex];\n                        /* if (value >= 80000.10)\r\n                            console.warn(\"WUUUT\"); */\n                        this.continuousVariables[_i10].setMinMax(value);\n                        row.push(value); //String to number\n                    }\n                } catch (err) {\n                    _didIteratorError15 = true;\n                    _iteratorError15 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                            _iterator15.return();\n                        }\n                    } finally {\n                        if (_didIteratorError15) {\n                            throw _iteratorError15;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion16 = true;\n                var _didIteratorError16 = false;\n                var _iteratorError16 = undefined;\n\n                try {\n                    for (var _iterator16 = geometryIndices[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n                        var geoIndex = _step16.value;\n\n                        if (hasIdGeometry) {\n                            var _value = columns[geoIndex];\n                            if (+_value === +_value) row.push(+_value);else row.push(_value.toUpperCase());\n                        } else row.push(+columns[geoIndex]);\n                    }\n                } catch (err) {\n                    _didIteratorError16 = true;\n                    _iteratorError16 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                            _iterator16.return();\n                        }\n                    } finally {\n                        if (_didIteratorError16) {\n                            throw _iteratorError16;\n                        }\n                    }\n                }\n\n                if (hasTime) {\n                    var granule = this.getGranule(columns[timeIndex]);\n                    this.timeVariable.addTemporalGranule(granule);\n                    this.timeVariable.addTemporalGranuleToSet(granule);\n                    row.push(granule);\n                }\n\n                var _iteratorNormalCompletion17 = true;\n                var _didIteratorError17 = false;\n                var _iteratorError17 = undefined;\n\n                try {\n                    for (var _iterator17 = optinalIndices[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                        var optionalIndex = _step17.value;\n\n                        if (+columns[optionalIndex] === +columns[optionalIndex]) //It's a number?\n                            row.push(+columns[optionalIndex]);else row.push(columns[optionalIndex]);\n                    }\n                    // resRows.push(row);\n                } catch (err) {\n                    _didIteratorError17 = true;\n                    _iteratorError17 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                            _iterator17.return();\n                        }\n                    } finally {\n                        if (_didIteratorError17) {\n                            throw _iteratorError17;\n                        }\n                    }\n                }\n\n                this.dataRowsSaved.push(row);\n            }\n            // console.log(this.workerIndex, this.dataRowsSaved.length);\n        }\n\n        /**\r\n         * TODO: DELETE AND Replace with GisplayDefaults.getGranule(timeString)\r\n         * Convert the time string to the granularity we want.\r\n         * @param {string} timeString - The time as it was read from the file. \r\n         * @returns {number} - The granul\r\n         * @memberof CSVDataWorker\r\n         */\n\n    }, {\n        key: 'getGranule',\n        value: function getGranule(timeString) {\n            var value = void 0;\n            // console.warn(timeString, this.timeGranularity);\n            /*\r\n            //if cyclic then ...\r\n            day of year -> dayOfYear (n temos )\r\n            month of year -> monthOfYear (temos)\r\n            day of month -> dayOfMonth (temos)\r\n            hour of day -> hourOfDay (temos)\r\n            minute of hour -> minuteOfHour (temos)\r\n            \r\n            //else continuous\r\n            year -> 2015, 2016 ...\r\n            month -> 2015_01, 2015_02 ... 2016_01 etc\r\n            day -> 2015_01_01, 2015_01_02 ...\r\n            hour -> 2015_01_01_01, 2015_01_01_01 ...\r\n            minute\r\n            value\r\n            */\n\n            switch (this.timeGranularity) {\n                //CYCLIC\n                case 'monthOfYear':\n                    //Mes do ano\n                    value = new Date(timeString).getMonth() + 1; //GOOD\n                    break;\n                case 'dayOfYear':\n                    value = -1; //CHANGE to calculate day of year\n                    break;\n                case 'dayOfMonth':\n                    value = new Date(timeString).getDate(); //GOOD\n                    break;\n                case 'hourOfDay':\n                    value = new Date(timeString).getHours(); //GOOD\n                    break;\n                case 'minuteOfHour':\n                    value = new Date(timeString).getMinutes(); //GOOD\n                    break;\n\n                //CONTINUOUS\n                case 'year':\n                    value = new Date(timeString).getFullYear();\n                    break;\n                case 'month':\n                    //Mes do ano\n                    value = new Date(timeString).getFullYear() + \"_\" + (new Date(timeString).getMonth() + 1);\n                    break;\n                case 'day':\n                    value = new Date(timeString).getFullYear() + \"_\" + (new Date(timeString).getMonth() + 1) + \"_\" + new Date(timeString).getDate();\n                    // value = Number(new Date(timeString).getFullYear() + \"\" + new Date(timeString).getMonth() + \"\" + new Date(timeString).getDay());\n                    break;\n                case 'value':\n                    value = +timeString;\n                    break;\n            }\n            // console.log(value);\n            return value;\n        }\n    }]);\n\n    return CSVDataWorker;\n}();\n\nnew CSVDataWorker();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** ./src/Gisplay/defaults.json ***!
  \***********************************/
/***/ (function(module, exports) {

eval("module.exports = {\"figures\":{\"cattle\":0,\"deaths\":1,\"deathsCross\":2,\"fire\":3,\"man\":4,\"person\":5,\"rectangle\":6,\"woman\":7},\"patterns\":{\"crossPattern\":0,\"diagonalLines\":1,\"plusPattern\":2,\"dotPattern\":3,\"wavePattern\":4},\"shapes\":{\"circle\":0,\"cross\":1,\"filled_circle\":2,\"filled_square\":3,\"plus\":4,\"square\":5,\"triangle\":6},\"figuresImageSize\":128,\"patternsImageSize\":32,\"shapesImageSize\":128,\"bgmapsProviders\":[\"Google Maps\",\"GM\",\"Mapbox\",\"MB\",\"Here Maps\",\"HM\",\"Bing Maps\",\"BM\"],\"availableClasssBreakMethods\":[\"quantiles\",\"equalintervals\",\"k-means\"],\"defaultClassBreakMethod\":\"quantiles\",\"reservedKeywords\":{\"longitude\":\"Longitude\",\"latitude\":\"Latitude\"},\"visualVariables\":{\"COLOR\":\"color\",\"SHAPE\":\"shape\",\"TEXTURE\":\"texture\",\"SIZE\":\"size\",\"ORIENTATION\":\"orientation\",\"POSITION\":\"position\",\"OPACITY\":\"opacity\"},\"defaultShadersVariables\":{\"position\":\"position\",\"projectionMatrix\":\"Mproj\"},\"defaultColor\":[0,0,0],\"defaultAlpha\":1,\"defaultShape\":\"triangle\",\"defaultTexture\":\"terrain\",\"defaultFigure\":\"deathsCross\",\"defaultOrientation\":0,\"defaultSize\":10,\"minSize\":15,\"maxSize\":100,\"timeVariables\":{\"INSTANT\":\"instant\",\"INTERVAL\":\"interval\",\"ANIMATION\":\"animation\"},\"bgmapsUrls\":{\"MB\":{\"css\":[\"https://api.mapbox.com/mapbox.js/v2.4.0/mapbox.css\"],\"js\":[\"https://api.mapbox.com/mapbox.js/v2.4.0/mapbox.js\"]},\"MBGL\":{\"css\":[\"https://api.tiles.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.css\"],\"js\":[\"https://api.tiles.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.js\"]},\"GM\":{\"js\":[\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBU70aRzSHEkkEDGM54wxOfz6GBOffjzlE\"]},\"HM\":{\"js\":[\"http://js.api.here.com/v3/3.0/mapsjs-core.js\",\"http://js.api.here.com/v3/3.0/mapsjs-service.js\",\"http://js.api.here.com/v3/3.0/mapsjs-mapevents.js\"]},\"BM\":{\"js\":[\"http://www.bing.com/api/maps/mapcontrol?branch=release\"]}}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9HaXNwbGF5L2RlZmF1bHRzLmpzb24/Mjg1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcImZpZ3VyZXNcIjp7XCJjYXR0bGVcIjowLFwiZGVhdGhzXCI6MSxcImRlYXRoc0Nyb3NzXCI6MixcImZpcmVcIjozLFwibWFuXCI6NCxcInBlcnNvblwiOjUsXCJyZWN0YW5nbGVcIjo2LFwid29tYW5cIjo3fSxcInBhdHRlcm5zXCI6e1wiY3Jvc3NQYXR0ZXJuXCI6MCxcImRpYWdvbmFsTGluZXNcIjoxLFwicGx1c1BhdHRlcm5cIjoyLFwiZG90UGF0dGVyblwiOjMsXCJ3YXZlUGF0dGVyblwiOjR9LFwic2hhcGVzXCI6e1wiY2lyY2xlXCI6MCxcImNyb3NzXCI6MSxcImZpbGxlZF9jaXJjbGVcIjoyLFwiZmlsbGVkX3NxdWFyZVwiOjMsXCJwbHVzXCI6NCxcInNxdWFyZVwiOjUsXCJ0cmlhbmdsZVwiOjZ9LFwiZmlndXJlc0ltYWdlU2l6ZVwiOjEyOCxcInBhdHRlcm5zSW1hZ2VTaXplXCI6MzIsXCJzaGFwZXNJbWFnZVNpemVcIjoxMjgsXCJiZ21hcHNQcm92aWRlcnNcIjpbXCJHb29nbGUgTWFwc1wiLFwiR01cIixcIk1hcGJveFwiLFwiTUJcIixcIkhlcmUgTWFwc1wiLFwiSE1cIixcIkJpbmcgTWFwc1wiLFwiQk1cIl0sXCJhdmFpbGFibGVDbGFzc3NCcmVha01ldGhvZHNcIjpbXCJxdWFudGlsZXNcIixcImVxdWFsaW50ZXJ2YWxzXCIsXCJrLW1lYW5zXCJdLFwiZGVmYXVsdENsYXNzQnJlYWtNZXRob2RcIjpcInF1YW50aWxlc1wiLFwicmVzZXJ2ZWRLZXl3b3Jkc1wiOntcImxvbmdpdHVkZVwiOlwiTG9uZ2l0dWRlXCIsXCJsYXRpdHVkZVwiOlwiTGF0aXR1ZGVcIn0sXCJ2aXN1YWxWYXJpYWJsZXNcIjp7XCJDT0xPUlwiOlwiY29sb3JcIixcIlNIQVBFXCI6XCJzaGFwZVwiLFwiVEVYVFVSRVwiOlwidGV4dHVyZVwiLFwiU0laRVwiOlwic2l6ZVwiLFwiT1JJRU5UQVRJT05cIjpcIm9yaWVudGF0aW9uXCIsXCJQT1NJVElPTlwiOlwicG9zaXRpb25cIixcIk9QQUNJVFlcIjpcIm9wYWNpdHlcIn0sXCJkZWZhdWx0U2hhZGVyc1ZhcmlhYmxlc1wiOntcInBvc2l0aW9uXCI6XCJwb3NpdGlvblwiLFwicHJvamVjdGlvbk1hdHJpeFwiOlwiTXByb2pcIn0sXCJkZWZhdWx0Q29sb3JcIjpbMCwwLDBdLFwiZGVmYXVsdEFscGhhXCI6MSxcImRlZmF1bHRTaGFwZVwiOlwidHJpYW5nbGVcIixcImRlZmF1bHRUZXh0dXJlXCI6XCJ0ZXJyYWluXCIsXCJkZWZhdWx0RmlndXJlXCI6XCJkZWF0aHNDcm9zc1wiLFwiZGVmYXVsdE9yaWVudGF0aW9uXCI6MCxcImRlZmF1bHRTaXplXCI6MTAsXCJtaW5TaXplXCI6MTUsXCJtYXhTaXplXCI6MTAwLFwidGltZVZhcmlhYmxlc1wiOntcIklOU1RBTlRcIjpcImluc3RhbnRcIixcIklOVEVSVkFMXCI6XCJpbnRlcnZhbFwiLFwiQU5JTUFUSU9OXCI6XCJhbmltYXRpb25cIn0sXCJiZ21hcHNVcmxzXCI6e1wiTUJcIjp7XCJjc3NcIjpbXCJodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC5qcy92Mi40LjAvbWFwYm94LmNzc1wiXSxcImpzXCI6W1wiaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3guanMvdjIuNC4wL21hcGJveC5qc1wiXX0sXCJNQkdMXCI6e1wiY3NzXCI6W1wiaHR0cHM6Ly9hcGkudGlsZXMubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjAuNDEuMC9tYXBib3gtZ2wuY3NzXCJdLFwianNcIjpbXCJodHRwczovL2FwaS50aWxlcy5tYXBib3guY29tL21hcGJveC1nbC1qcy92MC40MS4wL21hcGJveC1nbC5qc1wiXX0sXCJHTVwiOntcImpzXCI6W1wiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lCVTcwYVJ6U0hFa2tFREdNNTR3eE9mejZHQk9mZmp6bEVcIl19LFwiSE1cIjp7XCJqc1wiOltcImh0dHA6Ly9qcy5hcGkuaGVyZS5jb20vdjMvMy4wL21hcHNqcy1jb3JlLmpzXCIsXCJodHRwOi8vanMuYXBpLmhlcmUuY29tL3YzLzMuMC9tYXBzanMtc2VydmljZS5qc1wiLFwiaHR0cDovL2pzLmFwaS5oZXJlLmNvbS92My8zLjAvbWFwc2pzLW1hcGV2ZW50cy5qc1wiXX0sXCJCTVwiOntcImpzXCI6W1wiaHR0cDovL3d3dy5iaW5nLmNvbS9hcGkvbWFwcy9tYXBjb250cm9sP2JyYW5jaD1yZWxlYXNlXCJdfX19XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvR2lzcGxheS9kZWZhdWx0cy5qc29uXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ })
/******/ ]);